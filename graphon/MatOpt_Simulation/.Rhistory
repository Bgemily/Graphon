}
return(Lt)
}
AltMin = function(M, L0, R0, lr, MaxIter, subMaxIter){
Lt = L0; Rt = R0
for (t in 1:MaxIter) {
Lt = OptL(M, Lt, Rt, lr, subMaxIter)
Rt = OptR(M, Lt, Rt, lr, subMaxIter)
}
return(list(L_est = Lt, R_est = Rt))
}
stT = Sys.time()
LR_0 = LR_decomp(M_obs/(1-missfrac))
L0 = LR_0$L0; R0 = LR_0$R0
AltMin_est = AltMin(M_obs, L0, R0, 0.06, 100, 100)
L_est = AltMin_est$L_est; R_est = AltMin_est$R_est
M_est = L_est %*% t(R_est)
endT = Sys.time()
norm(Projector(M_est-M_obs), 'f')/norm(M_obs, 'f')
norm(M_est-M_true, 'f')/norm(M_true, 'f')
endT - stT
# AltMin ------------------------------------------------------------------
OptR = function(M, L, R0, lr, MaxIter){
Rt = R0
for (i in 1:MaxIter) {
Rt = Rt - lr * t(Projector(L%*%t(Rt)-M)) %*% L
}
return(Rt)
}
OptL = function(M, L0, R, lr, MaxIter){
Lt = L0
for (i in 1:MaxIter) {
Lt = Lt - lr * Projector(Lt%*%t(R)-M) %*% R
}
return(Lt)
}
AltMin = function(M, L0, R0, lr, MaxIter, subMaxIter){
Lt = L0; Rt = R0
for (t in 1:MaxIter) {
Lt = OptL(M, Lt, Rt, lr, subMaxIter)
Rt = OptR(M, Lt, Rt, lr, subMaxIter)
}
return(list(L_est = Lt, R_est = Rt))
}
stT = Sys.time()
LR_0 = LR_decomp(M_obs/(1-missfrac))
L0 = LR_0$L0; R0 = LR_0$R0
AltMin_est = AltMin(M_obs, L0, R0, 0.05, 100, 100)
L_est = AltMin_est$L_est; R_est = AltMin_est$R_est
M_est = L_est %*% t(R_est)
endT = Sys.time()
norm(Projector(M_est-M_obs), 'f')/norm(M_obs, 'f')
norm(M_est-M_true, 'f')/norm(M_true, 'f')
endT - stT
# AltMin ------------------------------------------------------------------
OptR = function(M, L, R0, lr, MaxIter){
Rt = R0
for (i in 1:MaxIter) {
Rt = Rt - lr * t(Projector(L%*%t(Rt)-M)) %*% L
}
return(Rt)
}
OptL = function(M, L0, R, lr, MaxIter){
Lt = L0
for (i in 1:MaxIter) {
Lt = Lt - lr * Projector(Lt%*%t(R)-M) %*% R
}
return(Lt)
}
AltMin = function(M, L0, R0, lr, MaxIter, subMaxIter){
Lt = L0; Rt = R0
for (t in 1:MaxIter) {
Lt = OptL(M, Lt, Rt, lr, subMaxIter)
Rt = OptR(M, Lt, Rt, lr, subMaxIter)
}
return(list(L_est = Lt, R_est = Rt))
}
stT = Sys.time()
LR_0 = LR_decomp(M_obs/(1-missfrac))
L0 = LR_0$L0; R0 = LR_0$R0
AltMin_est = AltMin(M_obs, L0, R0, 0.059, 100, 100)
L_est = AltMin_est$L_est; R_est = AltMin_est$R_est
M_est = L_est %*% t(R_est)
endT = Sys.time()
norm(Projector(M_est-M_obs), 'f')/norm(M_obs, 'f')
norm(M_est-M_true, 'f')/norm(M_true, 'f')
endT - stT
# GD on Manifold ----------------------------------------------------------
FirstTime = 0
OptS = function(M, X, Y, S0, lr, subMaxIter){
St = S0
for (t in 1:subMaxIter) {
St = St - lr * t(X) %*% Projector(X%*%St%*%t(Y)-M) %*% Y
}
return(St)
}
F_manifold = function(M, X, Y, S0, lr, subMaxIter){
# S0 = 1/(1-missfrac) * t(X) %*% M %*% Y ######## Improve?
S = OptS(M, X, Y, S0, lr, subMaxIter)
return(1/2 * norm(Projector(M-X%*%S%*%t(Y)), 'f')^2)
}
OptSpace = function(M, X0, Y0, S0, MaxIter, sublr, subMaxIter){
Xt = X0; Yt = Y0; St = S0
n1 = dim(M)[1]; n2 = dim(M)[2];
for (i in 1:MaxIter) {
# St = 1/(1-missfrac) * t(Xt) %*% M %*% (Yt) ###### Improve?
St = OptS(M, Xt, Yt, St, sublr, subMaxIter)
gradX = (diag(1, n1)-Xt%*%t(Xt)) %*% Projector(Xt%*%St%*%t(Yt)-M) %*% Yt %*% t(St)
gradY = (diag(1, n2)-Yt%*%t(Yt)) %*% t(Projector(Xt%*%St%*%t(Yt))-M) %*% Xt %*% St
SVD_gradX = rsvd(-gradX, r); U_gradX = SVD_gradX$u; V_gradX = SVD_gradX$v; d_gradX = SVD_gradX$d
SVD_gradY = rsvd(-gradY, r); U_gradY = SVD_gradY$u; V_gradY = SVD_gradY$v; d_gradY = SVD_gradY$d
F_XtYt = F_manifold(M, Xt, Yt, St, sublr, subMaxIter)
grad_norm_sq = norm(gradX, 'f')^2 + norm(gradY, 'f')^2
# lr = 0.001
# X = Xt %*% V_gradX %*% diag(cos((d_gradX)*lr)) %*% t(V_gradX) + U_gradX %*% diag(sin((d_gradX)*lr)) %*% t(V_gradX)
# Y = Yt %*% V_gradY %*% diag(cos((d_gradY)*lr)) %*% t(V_gradY) + U_gradY %*% diag(sin((d_gradY)*lr)) %*% t(V_gradY)
m = 1
alpha = 1
while (m<=12) {
lr = alpha / 2^(m-1)
X = Xt %*% V_gradX %*% diag(cos((d_gradX)*lr)) %*% t(V_gradX) + U_gradX %*% diag(sin((d_gradX)*lr)) %*% t(V_gradX)
Y = Yt %*% V_gradY %*% diag(cos((d_gradY)*lr)) %*% t(V_gradY) + U_gradY %*% diag(sin((d_gradY)*lr)) %*% t(V_gradY)
if ((F_manifold(M, X, Y, St, lr, subMaxIter) - F_XtYt) < (-0.5*lr*(grad_norm_sq))) {
break
}
m = m+1
}
Xt = X; Yt = Y
}
return(list(Xt = Xt, Yt = Yt))
}
library(rsvd)
Init_OptSpace = function(M){
n1 = dim(M)[1]; n2 = dim(M)[2]
miss_position = matrix(0, n1, n2); miss_position[imiss] = 1
row_degree = rowSums(miss_position)
col_degree = colSums(miss_position)
for (j in 1:n2) {
if (col_degree[j]>2*length(imiss)/n2) M[,j] = 0
}
for (i in 1:n1) {
if (row_degree[i]>2*length(imiss)/n1) {
M[i,] = 0
}
}
rsvd_TrM = rsvd(1/(1-missfrac)*M, r)
return(list(X0 = rsvd_TrM$u, Y0 = rsvd_TrM$v, S0 = diag(rsvd_TrM$d)))
}
stT = Sys.time()
init_optspace = Init_OptSpace(M_obs)
X0 = init_optspace$X0; Y0 = init_optspace$Y0; S0 = init_optspace$S0
GD_OnManifold = OptSpace(M_obs, X0, Y0, S0, 10000, 1, 50)
X_est = GD_OnManifold$Xt; Y_est = GD_OnManifold$Yt
# S_est = 1/(1-missfrac) * t(X_est) %*% M_obs %*% (Y_est)
S_est = OptS(M_obs, X_est, Y_est, S0, 1, 50)
M_est = X_est %*% S_est %*% t(Y_est)
endT = Sys.time()
norm(Projector(M_est-M_obs), 'f')/norm(M_obs, 'f')
norm(M_est-M_true, 'f')/norm(M_true, 'f')
endT - stT
norm(M_obs-M_true, 'f')/norm(M_true, 'f')
# Vanilla GD --------------------------------------------------------------
VanillaGD = function(M, L0, R0, lr, MaxIter)
{
Lt = L0; Rt = R0;
for (t in 1:MaxIter) {
L = Lt - lr * Projector(Lt%*%t(Rt)-M) %*% Rt
R = Rt - lr * t(Projector(Lt%*%t(Rt)-M)) %*% Lt
Lt = L
Rt = R
}
return(list(Lt = Lt, Rt = Rt))
}
error1 = c()
error2 = c()
starttime = Sys.time()
for (t in 1:101) {
MaxIter = 10000 + 100*(t-1)
LR_0 = LR_decomp(M_obs/(1-missfrac))
L0 = LR_0$L0; R0 = LR_0$R0
LR_est = VanillaGD(M_obs, L0, R0, 0.04, MaxIter)
L_est = LR_est$Lt; R_est = LR_est$Rt
M_est = L_est%*%t(R_est)
# M_est = M_est + Projector(M_obs-M_est)
error1[t] = norm(Projector(M_est-M_obs), 'f')/norm(M_obs, 'f')
error2[t] = norm(M_est-M_true, 'f')/norm(M_true, 'f')
}
endtime = Sys.time()
(endtime - starttime)
error1
error2
library(ggplot2)
p = ggplot() +
geom_line(data = error1, color = "blue") +
geom_line(data = error2, color = "red") +
xlab('Dates') +
ylab('percent.change')
?geom_line
p = ggplot() +
geom_path(data = error1, color = "blue") +
geom_path(data = error2, color = "red") +
xlab('Dates') +
ylab('percent.change')
?ggplot
data.frame(error1)
p = ggplot() +
geom_line(data = data.frame(error1), color = "blue") +
geom_line(data = data.frame(error2), color = "red") +
xlab('Dates') +
ylab('percent.change')
print(p)
p = ggplot() +
geom_line(data = data.frame(error1), aes(x = c(1:101), y = error1), color = "blue") +
geom_line(data = data.frame(error2), aes(x = c(1:101), y = error2), color = "red") +
xlab('Dates') +
ylab('percent.change')
print(p)
plot(error1)
plot(error2)
for (t in 1:101) {
MaxIter = 0 + 100*(t-1)
LR_0 = LR_decomp(M_obs/(1-missfrac))
L0 = LR_0$L0; R0 = LR_0$R0
LR_est = VanillaGD(M_obs, L0, R0, 0.04, MaxIter)
L_est = LR_est$Lt; R_est = LR_est$Rt
M_est = L_est%*%t(R_est)
# M_est = M_est + Projector(M_obs-M_est)
error1[t] = norm(Projector(M_est-M_obs), 'f')/norm(M_obs, 'f')
error2[t] = norm(M_est-M_true, 'f')/norm(M_true, 'f')
}
plot(error1)
plot(error2)
for (t in 1:101) {
MaxIter = 0 + 200*(t-1)
LR_0 = LR_decomp(M_obs/(1-missfrac))
L0 = LR_0$L0; R0 = LR_0$R0
LR_est = VanillaGD(M_obs, L0, R0, 0.04, MaxIter)
L_est = LR_est$Lt; R_est = LR_est$Rt
M_est = L_est%*%t(R_est)
# M_est = M_est + Projector(M_obs-M_est)
error1[t] = norm(Projector(M_est-M_obs), 'f')/norm(M_obs, 'f')
error2[t] = norm(M_est-M_true, 'f')/norm(M_true, 'f')
}
plot(error1)
plot(error2)
plot(error1, xlab = 'Iteration')
plot(error2, xlab = 'Iteration')
plot(200*c(1:101), error1, xlab = 'Iteration')
plot(200*c(1:101), error2, xlab = 'Iteration')
drivers <- read.csv("~/Documents/Academic/TA/SAT_108/Discussion2/drivers.csv")
View(drivers)
head(drivers$Age)
attach(drivers)
head(Age)
head(Distance)
plot(Age, Distance)
plot(Age, Distance, main = 'Scatter Plot of Age versus Distance')
fit = lm(Distance~Age)
?fit
?lm
summary(fit)
fit$residuals
sqrt(sum(fit$residuals^2)/(28))
fit$effects
fit$rank
fit$assign
fit$qr
se(fit)
methods(fit)
methods(lm)
predict.lm(fit)
predict.lm(fit, 29)
data.frame(30)
data.frame(c(30))
data.frame(x=30)
predict.lm(fit, newdata)
predict.lm(fit, new)
new = data.frame(x=30)
predict.lm(fit, new)
newdata = data.frame(x=30)
predict.lm(fit, newdata)
newdata = data.frame(x=50)
predict.lm(fit, newdata)
newdata
newdata = data.frame(x=c(1,50))
newdata
predict.lm(fit, Age)
predict.lm(fit, data.frame(Age))
predict.lm()
?predict.lm()
predict.lm(fit, newdata)
newdata = data.frame(x=c(1,50))
predict.lm(fit, newdata)
newdata = data.frame(x=c(50))
predict.lm(fit, newdata)
fit.predict(29)
newdata = data.frame(Age=c(50))
predict.lm(fit, newdata)
newdata = data.frame(Age=c(29))
predict.lm(fit, newdata)
b0 = fit$coefficients[0]
b1 = fit$coefficients[1]
b0 + b1 * 29
b0
fit$coefficients
b0 = fit$coefficients[1]
b1 = fit$coefficients[2]
b0 + b1 * 29
b1
b0 + b1 * 29
predict.lm(fit, newdata)
fit$residuals
fit$residuals[18]
Distance[which(Age==18)] - fit$fitted.values[which(Age==18)]
Distance[which(Age==18)]
fit$fitted.values[which(Age==18)]
b0 + b1 * 18
Distance
Distance[18]
which(Age==18)
Age
Distance[which(Age==18)] - fit$fitted.values[which(Age==18)]
fit$coefficients
summary(fit) ### Residual standard error: 49.76
detach(drivers)
Age
head(Age)
head(drivers$Age)
plot(Age, Distance, main = 'Scatter Plot of Age versus Distance')
head(drivers$Age)
attach(drivers) ## Attach the dataset to R so that the variables can be accessed by simply giving their names
head(Age)
plot(Age, Distance, main = 'Scatter Plot of Age versus Distance')
fit = lm(Distance~Age)
summary(fit) ### Residual standard error: 49.76
summary(fit)$sigma
summary(fit)$sigma
newdata = data.frame(Age=c(29))
predict.lm(fit, newdata)
summary(Age)
fit$coefficients
which(Age==18)
true_value = Distant[which(Age==18)]
est_value = fit$fitted.values[which(Age==18)]
error = true_value - est_value
true_value = Distance[which(Age==18)]
est_value = fit$fitted.values[which(Age==18)]
error = true_value - est_value
print(error)
est_value = predict.lm(fit, data.frame(Age=18))
error = true_value - est_value
print(error)
class(fit)
?predict.lm
fit$coefficients
drivers <- read.csv("~/Documents/Academic/TA/SAT_108/Discussion2/drivers.csv")
View(drivers)
head(drivers$Age)
head(Age)
drivers <- read.csv("~/Documents/Academic/TA/SAT_108/Discussion2/drivers.csv")
View(drivers)
head(drivers$Age)
head(Age)
detach(drivers)
head(Age)
attach(drivers)
head(Age)
plot(Age, Distance, main = 'Scatter Plot of Age versus Distance')
plot(Age, Distance, main = 'Scatter Plot of Age versus Distance')
summary(Age)
fit = lm(Distance~Age)
class(fit)
summary(fit)
?fit
fit$coefficients
summary(fit)$sigma
newdata = data.frame(Age=c(29))
newdata
Age=c(29, 30, 31)
class(Age)
newdata = data.frame(Age=c(29, 30, 31))
newdata
newdata = data.frame(Age=c(29))
predict.lm(fit, newdata)
b0 = fit$coefficients[1]
b1 = fit$coefficients[2]
b0 + b1 * 29
which(Age==18)
which(Age==18)
head(Age)
drivers <- read.csv("~/Documents/Academic/TA/SAT_108/Discussion2/drivers.csv")
View(drivers)
detach(drivers)
attach(drivers) ## Attach the dataset to R so that the variables can be accessed by simply giving their names
head(Age)
View(drivers)
View(drivers)
Age = drivers$Age
which(Age==18)
true_value = Distance[which(Age==18)]
true_value
= predict.lm(fit, data.frame(Age=18))
est_value = predict.lm(fit, data.frame(Age=18))
est_value
error = true_value - est_value
print(error)
true_value - est_value
detach(drivers)
drivers
Age
attach(drivers) ## Attach the dataset to R so that the variables can be accessed by simply giving their names
head(Age)
detach(drivers)
head(Age)
head(Age)
head(Age)
drivers <- read.csv("~/Documents/Academic/TA/SAT_108/Discussion2/drivers.csv")
View(drivers)
head(Age)
attach(drivers) ## Attach the dataset to R so that the variables can be accessed by simply giving their names
head(Age)
head(Age)
head(Age)
drivers <- read.csv("~/Documents/Academic/TA/SAT_108/Discussion2/drivers.csv")
View(drivers)
plot
plot(Age, Distance, main = 'Scatter Plot of Age versus Distance')
summary(Age)
fit = lm(Distance~Age)
class(fit)
summary(fit)
fit$coefficients
summary(fit)$sigma
b0 = fit$coefficients[1]
b1 = fit$coefficients[2]
b0 + b1 * 29
c(29, 30, 31)
newdata = data.frame(Age=c(29, 30, 31))
newdata
newdata = data.frame(Age=c(29))
predict.lm(fit, newdata)
b0 = fit$coefficients[1]
b1 = fit$coefficients[2]
b0 + b1 * 29
newdata = data.frame(Age=29)
predict.lm(fit, newdata)
newdata = data.frame(Age=c(29, 30))
predict.lm(fit, newdata)
which(Age==18)
head(Age)
true_value = Distance[which(Age==18)]
true_value
est_value = predict.lm(fit, data.frame(Age=18))
est_value
error = true_value - est_value
print(error)
true_value = Distance[which(Age==18)]
true_value = Distance[which(Age==18)]
est_value = predict.lm(fit, data.frame(Age=18))
error = true_value - est_value
print(error)
true_value - est_value
?shapiro.test
setwd('../../../TA/SAT_108/Discussion3/')
read.csv('drivers.csv')
drivers = read.csv("drivers.csv")
fit = lm(Distance~Age, data = drivers)
residuals(fit)
fit$residuals
plot(drivers$Age, residuals)
length(residuals)
res = fit$residuals
plot(drivers$Age, res)
?plot
plot(drivers$Age, res, cex = .5)
plot(drivers$Age, res, cex = 1.5)
plot(drivers$Age, res, cex = .5)
?par
?plot
shapiro.test(res)
fligner.test(res)
?fligner.test
fligner.test(fit)
fligner.test( Distance ~ Age, data = drivers)
fligner.test( drivers$Distance ~ drivers$Age )
fit$qr
summary(fit)
SSTO = sum(sapply(drivers$Distance, function(x) (x-mean(drivers$Distance))^2))
SSE = sum((drivers$Distance-fit$fitted.values)^2)
SSE-sum(res^2)
SSE
(SSTO-SSE)/SSTO
summary(fit)$r.squared
drivers = read.csv("drivers.csv")
fit = lm( Distance ~ Age, data = drivers )
res = fit$residuals
plot( x = drivers$Age, y = res, cex = .5 )
plot( x = drivers$Age, y = res, cex = 1.5 )
plot( x = drivers$Age, y = res, cex = .5 )
?shapiro.test
shapiro.test(res) ### p-value = 0.5859
?fligner.test
fligner.test( Distance ~ Age, data = drivers ) ### p-value = 0.4125
summary(fit)$r.squared
summary(fit)
plot( x = drivers$Age, y = res, cex = .5 )
shapiro.test(res)
?fligner.test
fligner.test( Distance ~ Age, data = drivers ) ### p-value = 0.4125
fligner.test( drivers$Distance ~ drivers$Age )
summary(fit)$r.squared
summary(fit)
