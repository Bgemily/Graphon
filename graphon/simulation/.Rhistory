plot_jitter_boxplot(data=data.frame(ARI_overclus_1, ARI_overclus_2, ARI_overclus_3 , ARI))
plot_jitter_boxplot = function(data)
{
library(ggplot2)
library(dplyr)
library(viridis)
data = reshape2::melt(data, id.vars=NULL, variable.name="name")
sample_size = data %>% group_by(name) %>% summarize(num=n())
data %>%
left_join(sample_size) %>%
# mutate(myaxis = paste0(name)) %>%
ggplot( aes(x=name, y=value, fill=name)) +
geom_violin(width=1.4, alpha=0.3) +
geom_boxplot(width=0.3, alpha=0.8) +
scale_fill_viridis(discrete = TRUE) +
theme_light() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("") +
ylab("ARI")
}
plot_jitter_boxplot(data=data.frame(ARI_overclus_1, ARI_overclus_2, ARI_overclus_3 , ARI))
plot_jitter_boxplot = function(data)
{
library(ggplot2)
library(dplyr)
library(viridis)
data = reshape2::melt(data, id.vars=NULL, variable.name="name")
sample_size = data %>% group_by(name) %>% summarize(num=n())
data %>%
left_join(sample_size) %>%
# mutate(myaxis = paste0(name)) %>%
ggplot( aes(x=name, y=value, fill=name)) +
geom_violin(width=1, alpha=0.3) +
geom_boxplot(width=0.3, alpha=0.8) +
scale_fill_viridis(discrete = TRUE) +
theme_light() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("") +
ylab("ARI")
}
plot_jitter_boxplot(data=data.frame(ARI_overclus_1, ARI_overclus_2, ARI_overclus_3 , ARI))
# ARI ---------------------------------------------------------------------
results = results2
membership_true = results[[1]]$network$membership_true
clusters_list = lapply(results, function(x)x$clus_result$clusters)
ARI = get_ARI(membership_true, clusters_list)
clusters_list_exaclus = lapply(results, function(x)x$clus_result$clusters_history[[1]])
ARI_exaclus = get_ARI(membership_true, clusters_list_exaclus)
clusters_list_overclus_1 = lapply(results, function(x)x$clus_result$clusters_history[[3]])
ARI_iter_1 = get_ARI(membership_true, clusters_list_overclus_1)
clusters_list_overclus_2 = lapply(results, function(x)x$clus_result$clusters_history[[5]])
ARI_iter_2 = get_ARI(membership_true, clusters_list_overclus_2)
clusters_list_overclus_3 = lapply(results, function(x)x$clus_result$clusters_history[[7]])
ARI_iter_3 = get_ARI(membership_true, clusters_list_overclus_3)
plot_jitter_boxplot = function(data)
{
library(ggplot2)
library(dplyr)
library(viridis)
data = reshape2::melt(data, id.vars=NULL, variable.name="name")
sample_size = data %>% group_by(name) %>% summarize(num=n())
data %>%
left_join(sample_size) %>%
# mutate(myaxis = paste0(name)) %>%
ggplot( aes(x=name, y=value, fill=name)) +
geom_violin(width=1, alpha=0.3) +
geom_boxplot(width=0.3, alpha=0.8) +
scale_fill_viridis(discrete = TRUE) +
theme_light() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("") +
ylab("ARI")
}
plot_jitter_boxplot(data=data.frame(ARI_iter_1, ARI_iter_2, ARI_iter_3 , ARI))
# plot_jitter_boxplot(data=data.frame(ARI_exaclus, ARI_overclus_1, ARI_overclus_2, ARI_overclus_3 , ARI))
#
#
# plot_jitter_boxplot(data=data.frame(ARI_overclus_3.3, ARI_overclus_3.4, ARI_overclus_3.5, ARI_overclus_3.6))
plot_jitter_boxplot = function(data)
{
library(ggplot2)
library(dplyr)
library(viridis)
data = reshape2::melt(data, id.vars=NULL, variable.name="name")
sample_size = data %>% group_by(name) %>% summarize(num=n())
data %>%
left_join(sample_size) %>%
# mutate(myaxis = paste0(name)) %>%
ggplot( aes(x=name, y=value, fill=name)) +
geom_violin(width=1, alpha=0.3) +
geom_boxplot(width=0.3, alpha=0.8) +
scale_fill_viridis(discrete = TRUE) +
theme_light() +
theme(
axis.title.x = NULL
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("") +
ylab("ARI")
}
plot_jitter_boxplot = function(data)
{
library(ggplot2)
library(dplyr)
library(viridis)
data = reshape2::melt(data, id.vars=NULL, variable.name="name")
sample_size = data %>% group_by(name) %>% summarize(num=n())
data %>%
left_join(sample_size) %>%
# mutate(myaxis = paste0(name)) %>%
ggplot( aes(x=name, y=value, fill=name)) +
geom_violin(width=1, alpha=0.3) +
geom_boxplot(width=0.3, alpha=0.8) +
scale_fill_viridis(discrete = TRUE) +
theme_light() +
theme(
axis.title.x = NULL,
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("") +
ylab("ARI")
}
plot_jitter_boxplot(data=data.frame(ARI_iter_1, ARI_iter_2, ARI_iter_3 , ARI))
plot_jitter_boxplot = function(data)
{
library(ggplot2)
library(dplyr)
library(viridis)
data = reshape2::melt(data, id.vars=NULL, variable.name="name")
sample_size = data %>% group_by(name) %>% summarize(num=n())
data %>%
left_join(sample_size) %>%
# mutate(myaxis = paste0(name)) %>%
ggplot( aes(x=name, y=value, fill=name)) +
geom_violin(width=1, alpha=0.3) +
geom_boxplot(width=0.3, alpha=0.8) +
scale_fill_viridis(discrete = TRUE) +
theme_light() +
theme(
axis.title.x = element_blank(),
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("") +
ylab("ARI")
}
plot_jitter_boxplot(data=data.frame(ARI_iter_1, ARI_iter_2, ARI_iter_3 , ARI))
# Plot estimated connecting patterns -------------------------------------
results = results2
pdf_true_array = fun2pdfarray(results[[1]]$network$true_pdf_fun_list,
results[[1]]$network$tau_mat, results[[1]]$network$membership_true)
pdf_array_list = lapply(results, function(r)r$clus_result$center_pdf_array)
clusters_list = lapply(results, function(x)x$clus_result$clusters)
# permutate clusters and pdf_array's for each subject
index = 1:10
res = match_clusters(clusters_list = clusters_list[index], pdf_array_list = pdf_array_list[index],
pdf_true_array = pdf_true_array)
clusters_list = res$clusters_list
pdf_array_list = res$pdf_array_list
plot_pdf_array(pdf_array_list = pdf_array_list, pdf_true_array = pdf_true_array)
tau_vec->tmp
tmp[1:30]=tmp[1:30]-min(tmp[1:30])
tmp[1:30+30]=tmp[1:30+30]-min(tmp[1:30+30])
tmp[1:30+60]=tmp[1:30+60]-min(tmp[1:30+60])
plot(n0_vec*0.05, tmp)
plot(n0_vec[1:60]*0.05, tmp[1:60])
abline(b = 1)
abline(a=0, b = 1, col=2)
cor(n0_vec, tmp)
text(8,2, "r=0.9")
plot(n0_vec[1:60]*0.05, tmp[1:60], cex=1)
plot(n0_vec[1:60]*0.05, tmp[1:60], cex=.1)
plot(n0_vec[1:60]*0.05, tmp[1:60], cex=.3)
abline(a=0, b=1, col=2)
ggplot
ggplot(iris) +
geom_point(aes(x=n0_vec*0.05, y=tmp))
ggplot(iris,aes(x=n0_vec*0.05, y=tmp)) +
geom_point(aes(x=n0_vec*0.05, y=tmp))
ggplot(iris,aes(x=n0_vec*0.05, y=tmp)) +
geom_point()
tmp.df =  data.frame(x=n0_vec*0.05, y=tmp)
ggplot(tmp.df,aes(x,y)) +
geom_point()
ggplot(tmp.df,aes(x,y)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, color='red')
ggplot(tmp.df,aes(x,y)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, color='red')+
theme( axis.title.x = element_blank(),
axis.title.y = element_blank(),)
ggplot(tmp.df,aes(x,y)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, color='red')+
theme( axis.title.x = element_blank(),
axis.ticks = element_blank(),
axis.title.y = element_blank(),
)
ggplot(tmp.df,aes(x,y)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, color='red')+
theme( axis.title.x = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title.y = element_blank(),
)
ggplot(tmp.df,aes(x,y)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, color='red')+
theme( axis.title.x = element_blank(),
# axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title.y = element_blank(),
)
ccf
ccf(edge_time_mat[1,], edge_time_mat[2,])
?ccf
edge_time_mat[is.finite(edge_time_mat)]->tmp.edge
ccf(tmp.edge[1,],tmp.edge[2,])
tmp.edge
edge_time_mat->tmp.edge
tmp.edge[is.finite(tmp.edge)]
tmp.edge[which(tmp.edge<Inf)]
tmp.edge[which(tmp.edge<Inf,arr.ind = TRUE)]
edge_time_mat[1,]
edge_time_mat[1, edge_time_mat[1,]<Inf]
edge_time_mat[1, edge_time_mat[1,]<Inf]->tmp1
edge_time_mat[2, edge_time_mat[2,]<Inf]->tmp2
ccf(tmp1, tmp2)
names(ccf(tmp1,tmp2))
ccf(tmp1, tmp2)$lag
n0_vec*0.05
tau_vec
ccf(tmp1, tmp2)
install.packages("TSdist")
pairwise_dist_mat
rdist::pdist
maximum_pdist
??maximum_pdist
rdist::maximum_pdist
r = results2[[1]]
edge_time_mat = r$network$edge_time_mat
t_vec = r$network$t_vec
bw = 1
membership_true = r$network$membership_true
clusters_exaclus = r$clus_result$res_overclus$clusters_history[[1]]
membership_exaclus = clus2mem(clusters_exaclus)
clusters_overclus = r$clus_result$res_overclus$clusters_history[[2]]
membership_overclus = clus2mem(clusters_overclus)
clusters_iter_1 = r$clus_result$res_overclus$clusters_history[[3]]
membership_iter_1 = clus2mem(clusters_iter_1)
clusters_iter_2 = r$clus_result$res_overclus$clusters_history[[5]]
membership_iter_2 = clus2mem(clusters_iter_2)
clusters_iter_3 = r$clus_result$res_overclus$clusters_history[[7]]
membership_iter_3 = clus2mem(clusters_iter_3)
N_node = nrow(edge_time_mat)
node_pdf_array = get_node_pdf_array(edge_time_mat = edge_time_mat, clusters = list(c(1:N_node)),
n0_vec = numeric(N_node), t_vec = t_vec, bw = bw)
n0_vec_init = est_n0_vec(edge_time_mat = edge_time_mat, clusters = list(c(1:N_node)), t_vec = t_vec, bw = bw)
aligned_pdf_mat = t(sapply(1:N_node, function(i)shift(node_pdf_array[i,1,], n0_vec_init[i], pp=TRUE)))
dist_mat = rdist::pdist(aligned_pdf_mat)
get_dist_betw_pdfarray
?rdist::pdist
?align_pdf_gd
align_pdf_gd
rdist::pdist(aligned_pdf_mat, metric=function(u,v)align_pdf_gd(u,v)$dist_min)
degree_mat = get_node_degree_mat(edge_time_mat = edge_time_mat, clusters = list(c(1:N_node)))
degree_mat
pairwise_dist_mat(aligned_pdf_mat, degree_mat = degree_mat)
pairwise_dist_mat(node_pdf_array, degree_mat = degree_mat)
set.seed(81)
tsne = Rtsne::Rtsne(dist_mat, is_distance=TRUE, perplexity=20)$Y
# plot(tsne, pch=membership_true, col=membership_exaclus)
plot(tsne, pch=membership_true, col=membership_iter_1)
membership_true
membership_iter_1
clusters_iter_1
r
r$clus_result$res_overclus$
clusters_history
r$clus_result$
res_overclus
r$clus_result
clusters_exaclus = r$clus_result$clusters_history[[1]]
membership_exaclus = clus2mem(clusters_exaclus)
clusters_overclus = r$clus_result$clusters_history[[2]]
membership_overclus = clus2mem(clusters_overclus)
clusters_iter_1 = r$clus_result$clusters_history[[3]]
membership_iter_1 = clus2mem(clusters_iter_1)
clusters_iter_2 = r$clus_result$clusters_history[[5]]
membership_iter_2 = clus2mem(clusters_iter_2)
clusters_iter_3 = r$clus_result$clusters_history[[7]]
membership_iter_3 = clus2mem(clusters_iter_3)
dist_mat = rdist::pdist(aligned_pdf_mat)
N_node = nrow(edge_time_mat)
node_pdf_array = get_node_pdf_array(edge_time_mat = edge_time_mat, clusters = list(c(1:N_node)),
n0_vec = numeric(N_node), t_vec = t_vec, bw = bw)
n0_vec_init = est_n0_vec(edge_time_mat = edge_time_mat, clusters = list(c(1:N_node)), t_vec = t_vec, bw = bw)
aligned_pdf_mat = t(sapply(1:N_node, function(i)shift(node_pdf_array[i,1,], n0_vec_init[i], pp=TRUE)))
dist_mat = rdist::pdist(aligned_pdf_mat)
set.seed(81)
tsne = Rtsne::Rtsne(dist_mat, is_distance=TRUE, perplexity=20)$Y
# plot(tsne, pch=membership_true, col=membership_exaclus)
plot(tsne, pch=membership_true, col=membership_iter_1)
dist_mat
tsne
plot(tsne[,1],tsne[,2])
# plot(tsne, pch=membership_true, col=membership_exaclus)
plot(tsne, pch=membership_true, col=membership_iter_1)
plot
detach(plot.matrix::plot)
detach(plot.matrix)
detach("plot.matrix")
detach("plot.matrix",unload=TRUE)
remove.packages(plot.matrix)
remove.packages("plot.matrix")
plot.matrix::air.pvalue
search()
detach("package:plot.matrix", unload = TRUE)
# plot(tsne, pch=membership_true, col=membership_exaclus)
plot(tsne, pch=membership_true, col=membership_iter_1)
plot
dev.off()
# plot(tsne, pch=membership_true, col=membership_exaclus)
plot(tsne, pch=membership_true, col=membership_iter_1)
rm(plot)
tsne2
tsne
graphics::plot(tsne)
graphics::plot.default(tsne)
graphics::plot.default()
plot(tsne)
plot
library(graphics)
plot
unloadNamespace(graphics)
loadedNamespaces()
load(graphics)
plot(matrix(1:10,5,2))
reload("graphics")
devtools::reload("graphics")
devtools::reload(graphics)
devtools::reload(".")
reload(pkgload::inst("graphics"))
devtools::reload(pkgload::inst("graphics"))
save.image("~/Documents/Academic/SC/graphon/simulation/Untitled.RData")
# Q1 ----------------------------------------------------------------------
set.seed(1)
n = 100
z = runif(n, min=-1, max=1)
x = z*0.5 + 0.5 + rnorm(n, mean=0, sd=0.5)
y = x*2 + z*1 + rnorm(n, mean=0, sd=1)
fit.linear.model<-function(covariate,outcome){
X=cbind(1,covariate);
beta.fit=solve( t(X)%*%X )%*%t(X)%*%outcome;
return(beta.fit)
}
beta_hat = fit.linear.model(x, y)
beta_hat
library(AER)
data("STAR")
STAR
colnames(STAR)
?STAR
is.na(STAR$math2) || is.na(STAR$star2) || is.na(STAR$school2)
is.na(STAR$math2) | is.na(STAR$star2) | is.na(STAR$school2)
na_ind = (is.na(STAR$math2) | is.na(STAR$star2) | is.na(STAR$school2))
df = STAR[!na_ind]
na_ind = (is.na(STAR$math2) | is.na(STAR$star2) | is.na(STAR$school2))
df = STAR[!na_ind]
df = STAR[!na_ind, ]
# simple linear regression with only the class type
y = df$math2
x = df$star2
x
unique(x)
dummy_cols()
class(x)
levels(x)
?dummy
??dummy
x_dummy = cbind(x=="regular", x=="small")
x_dummy
beta_hat = fit.linear.model(x_dummy, y)
beta_hat
# fit a regression with school2 as additional variable
x2 = df$school2
x2
class(x2)
model.matrix(x2)
?model.matrix
model.matrix(~x2)
model.matrix(~x2+0)
model.matrix(~x2-1)
model.matrix(~x2)
model.matrix(~x2-1)
model.matrix(~x2)[, -1]
model.matrix(~x2)
model.matrix(~x2)[, -1]
x = df$star2
class(x)
levels(x)
model.matrix(~x)[,-1]
x_dummy = model.matrix(~x)[,-1]
head(x_dummy)
beta_hat = fit.linear.model(x_dummy, y)
beta_hat
x2_dummy = model.matrix(~x2)[, -1]
head(x2_dummy)
beta_hat2 = fit.linear.model(cbind(x_dummy, x2_dummy), y)
beta_hat2
beta_hat2[1:3]
beta_hat
setwd()
setwd(~)
setwd("~")
# Q1 ----------------------------------------------------------------------
set.seed(1)
n = 100
z = runif(n, min=-1, max=1)
x = z*0.5 + 0.5 + rnorm(n, mean=0, sd=0.5)
y = x*2 + z*1 + rnorm(n, mean=0, sd=1)
fit.linear.model<-function(covariate,outcome){
X=cbind(1,covariate);
beta.fit=solve( t(X)%*%X )%*%t(X)%*%outcome;
return(beta.fit)
}
beta_hat = fit.linear.model(x, y)
beta_hat
# install.packages("AER")
library(AER)
data("STAR")
STAR
head(AER)
head(STAR)
# remove rows with NAs in math2, star2 and school2
na_ind = (is.na(STAR$math2) | is.na(STAR$star2) | is.na(STAR$school2))
df = STAR[!na_ind, ]
df
y = df$math2
x = df$star2
x
class(x)
levels(x)
model.matrix(~x)
x_dummy = model.matrix(~x)[,-1]
head(x_dummy)
beta_hat = fit.linear.model(x_dummy, y)
beta_hat
x2 = df$school2
class(x2)
levels(x2)
x2_dummy = model.matrix(~x2)[,-1]
head(x2_dummy)
beta_hat2 = fit.linear.model(cbind(x_dummy, x2_dummy), y)
beta_hat2
beta_hat2[1:3]
beta_hat
# Q1 ----------------------------------------------------------------------
set.seed(1)
n = 100
z = runif(n, min=-1, max=1)
x = z*0.5 + 0.5 + rnorm(n, mean=0, sd=0.5)
y = x*2 + z*1 + rnorm(n, mean=0, sd=1)
fit.linear.model<-function(covariate,outcome){
X=cbind(1,covariate);
beta.fit=solve( t(X)%*%X )%*%t(X)%*%outcome;
return(beta.fit)
}
beta_hat = fit.linear.model(x, y)
beta_hat
# install.packages("AER")
library(AER)
data("STAR")
head(STAR)
# remove rows with NAs in math2, star2 and school2
na_ind = (is.na(STAR$math2) | is.na(STAR$star2) | is.na(STAR$school2))
df = STAR[!na_ind, ]
y = df$math2
x = df$star2
head(x)
class(x)
levels(x)
model.matrix(~x)
# you can use this model.matrix()
x_dummy = model.matrix(~x)[,-1]
head(x_dummy)
beta_hat = fit.linear.model(x_dummy, y)
beta_hat
# fit a regression with school2 as additional variable
x2 = df$school2
class(x2)
levels(x2)
x2_dummy = model.matrix(~x2)[,-1]
head(x2_dummy)
beta_hat2 = fit.linear.model(cbind(x_dummy, x2_dummy), y)
beta_hat2[1:3]
beta_hat2
beta_hat2[1:3]
beta_hat
