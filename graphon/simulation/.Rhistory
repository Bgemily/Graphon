return(f_list)
}
generate_network = function(SEED=0, total_time)
{
grid_x = seq(0,1,by=.01)
grid_y = seq(0,6,by=.01)
grid = expand.grid(grid_x, grid_y)
grid = as.matrix(grid)
radius_thres = 1
clus_size_1 = 4; clus_size_2 = 46
clusters_vec = c(rep(1,clus_size_1), rep(2,clus_size_2))
centers = cbind(c(rep(0.5,clus_size_1)), c(seq(0.8,5.2,length.out=clus_size_1)))
set.seed(42+SEED);
nodes_mat = rbind(centers, grid[sample(dim(grid)[1], clus_size_2),])
# dev.new(width=2,height=6,noRStudioGD = T)
plot(nodes_mat[,1], nodes_mat[,2], cex = .2, xlab='', ylab = '', xlim=c(0,1))
points(nodes_mat[1:clus_size_1,1], nodes_mat[1:clus_size_1,2], col='red')
# plot the circle
angel = seq(0, 2*pi, length.out=200)
x_center = centers[2,1]; y_center = centers[2,2]
points(x_center+radius_thres*cos(angel), y_center+radius_thres*sin(angel), cex=0.1, col='red')
set.seed(98+SEED); tau_vec = runif(clus_size_1, 0, 30)
edge_time_mat = matrix(Inf, nrow=length(clusters_vec), ncol=length(clusters_vec))
seed = 0+SEED
for (i in (1:(length(clusters_vec)))) {
for (j in ((1):length(clusters_vec))) {
if (i==j || norm(t(nodes_mat[i,]-nodes_mat[j,]), 'f')>radius_thres)
next
if (clusters_vec[i]==2 && clusters_vec[j]==2) {
seed = seed+1; set.seed(seed)
edge_time_mat[i,j] = runif(1, min=0, max=0.8*total_time)
edge_time_mat[j,i] = edge_time_mat[i,j]
}
else if(clusters_vec[i]==1 && clusters_vec[j]==2){
seed = seed+1; set.seed(seed)
tau = tau_vec[i]
edge_time_mat[i,j] = tau + rnorm(1, 5, 1)
edge_time_mat[j,i] = edge_time_mat[i,j]
}
}
}
return(list(edge_time_mat=edge_time_mat, nodes_mat=nodes_mat))
}
main = function(SEED, k=2, step_size=0.05)
{
total_time = 50
t = seq(0, total_time, 0.01)
# edge_time_mat = generate_network2(SEED, total_time)
edge_time_mat = generate_network(SEED, total_time)$edge_time_mat
f_list = get_emp_f_list(edge_time_mat, t)
f_center_var = 0
r_best = NULL
for (seed in (1:3+SEED)) {
r = cluster_curves_gd(f_list, k, seed=seed, step_size = step_size)
if (r$f_center_var > f_center_var)
{
clusters = r$clusters
f_center_var = r$f_center_var
r_best = r
}
print(r$f_center_var)
}
print(clusters)
return(list(f_list=f_list, f_center_list=r_best$f_center_list, clusters=r_best$clusters, n0_ve=r_best$n0_vec, f_center_var=r_best$f_center_var))
}
SEED_vec = seq(1908,16417,length.out=1)
results = vector("list", 0)
for (SEED in SEED_vec) {
results[[as.character(SEED)]]=main(SEED, k=2, step_size = 0.01)
}
save.image('case1_NSim1000.Rdata')
source('~/Documents/Academic/SC/graphon/simulation/cluster_curves.R')
# Violate assumption but still okay ---------------------------------------
generate_network2 = function(SEED=0, total_time)
{
grid_x = seq(0,1,by=.01)
grid_y = seq(0,6,by=.01)
grid = expand.grid(grid_x, grid_y)
grid = as.matrix(grid)
radius_thres1 = 2
radius_thres2 = 1
clus_size_1 = 4; clus_size_2 = 8; clus_size_3 = 46
clusters_vec = c(rep(1,clus_size_1), rep(2,clus_size_2), rep(3, clus_size_3))
centers = cbind(c(rep(0.5,clus_size_1), rep(c(0.7,0.3), clus_size_2/2)), c(seq(0.8,5.2,length.out=clus_size_1), seq(1,5,length.out=clus_size_2)))
set.seed(42+SEED);
nodes_mat = rbind(centers, grid[sample(dim(grid)[1], clus_size_3),])
# dev.new(width=2,height=6,noRStudioGD = T)
plot(nodes_mat[,1], nodes_mat[,2], cex = .2, xlab='', ylab = '', xlim=c(0,1))
points(nodes_mat[1:clus_size_1,1], nodes_mat[1:clus_size_1,2], col='red')
points(nodes_mat[1:clus_size_2+clus_size_1,1], nodes_mat[1:clus_size_2+clus_size_1,2], col='blue')
# plot the circles
angel = seq(0, 2*pi, length.out=200)
x_center = centers[2,1]; y_center = centers[2,2]
points(x_center+radius_thres1*cos(angel), y_center+radius_thres1*sin(angel), cex=0.1, col='red')
x_center = centers[1+clus_size_1,1]; y_center = centers[1+clus_size_1,2]
points(x_center+radius_thres2*cos(angel), y_center+radius_thres2*sin(angel), cex=0.1, col='blue')
set.seed(98+SEED); tau_vec = c(runif(clus_size_1, 40, 42), runif(clus_size_2,0,10))
edge_time_mat = matrix(Inf, nrow=length(clusters_vec), ncol=length(clusters_vec))
seed = 0+SEED
for (i in (1:(length(clusters_vec)))) {
for (j in ((1):length(clusters_vec))) {
dij = norm(t(nodes_mat[i,]-nodes_mat[j,]), 'f')
if (i==j || dij>radius_thres1)
next
if (clusters_vec[i]==3 && clusters_vec[j]==3 && dij<=radius_thres2) {
seed = seed+124; set.seed(seed)
edge_time_mat[i,j] = runif(1, min=0, max=0.6*total_time)
edge_time_mat[j,i] = edge_time_mat[i,j]
}
else if ((clusters_vec[i]==2 && clusters_vec[j]==3) && dij<=radius_thres2) {
seed = seed+165; set.seed(seed)
tau = tau_vec[i]
edge_time_mat[i,j] = tau + rnorm(1, 5,1)
edge_time_mat[j,i] = edge_time_mat[i,j]
}
else if (clusters_vec[i]==1 && clusters_vec[j]==2 && dij<=radius_thres1) {
seed = seed+18;
tau = tau_vec[i]
set.seed(seed)
edge_time_mat[i,j] = tau + runif(1, 0,6)
edge_time_mat[j,i] = edge_time_mat[i,j]
}
}
}
return(list(edge_time_mat=edge_time_mat, nodes_mat=nodes_mat))
}
main2 = function(SEED, k=2, step_size=0.05)
{
total_time = 50
t = seq(0, total_time, 0.01)
edge_time_mat = generate_network2(SEED, total_time)$edge_time_mat
f_list = get_emp_f_list(edge_time_mat, t)
f_center_var = 0
f_center_dist_min = 0
r_best = NULL
for (seed in (1:3+SEED)) {
# r = cluster_curves(f_list, k, seed=seed)
r = cluster_curves_gd(f_list, k, seed=seed, step_size = step_size)
# if (r$f_center_var > f_center_var)
if (r$f_center_dist_min > f_center_dist_min)
{
clusters = r$clusters
f_center_var = r$f_center_var
f_center_dist_min = r$f_center_dist_min
r_best = r
}
print(r$f_center_var)
print(r$f_center_dist_min)
}
print(clusters)
return(list(f_list=f_list, f_center_list=r_best$f_center_list, clusters=r_best$clusters, n0_ve=r_best$n0_vec, f_center_var=r_best$f_center_var))
}
# SEED_vec = c(109)
SEED_vec = seq(189,1107,length.out=1)
results2 = vector("list", 0)
for (SEED in SEED_vec) {
results2[[as.character(SEED)]]=main2(SEED, k=3, step_size = 0.01)
}
save.image(file='case1_NSim1000.RData')
total_time = 50
t = seq(0, total_time, 0.01)
edge_time_mat = generate_network2(189, total_time)$edge_time_mat
f_list = get_emp_f_list(edge_time_mat, t)
for (i in c(1:40)) {
plot(f_list[[i]], type='l', main=i)
}
'a'+'b'
cat('b',3)
count = 1
print('=============')
print(cat('case2, trial:',count))
print('=============')
cat('case2, trial:',count)
print(cat('case2, trial:',count))
c('case2, trial:',count)
print(c('case2, trial:',count))
?cat
print('=============')
cat('case2, trial:',count)
print('=============')
print('=============')
cat('case2, trial:',count)
print('=============')
load("/Users/bgemily/Downloads/case2_NSim70.Rdata")
length(results2)
membership_true2 = c(rep(1,4), rep(2,8), rep(3,46))
ARI2 = get_ARI(membership_true2, results2)
boxplot(ARI2)
hist(ARI2)
summary(ARI2)
sd(ARI2)
source('~/Documents/Academic/SC/graphon/simulation/cluster_curves.R')
source('~/Documents/Academic/SC/graphon/simulation/cluster_curves.R')
`solution+concentration` <- read.table("~/Documents/Academic/TA/SAT108_WQ2019/HW/HW4/solution+concentration.txt", quote="\"", comment.char="")
View(`solution+concentration`)
lm(V1^-0.2~V2, data=`solution+concentration`)
lm(V1^-0.2~V2, data=`solution+concentration`)->fit
summary(fit)
sum(fit$residuals^2)
lambda=-0.2
n=dim(`solution+concentration`)[1]
?prod
K2 = prod(`solution+concentration`$V1)^(1/n)
K1 = 1/(lambda*K2^(lambda-1))
W = K1*(`solution+concentration`$V1^lambda-1)
W
fit=lm(W~`solution+concentration`$V2)
sum(fit$residuals^2)
lm(log10(V1)~V2)
lm(log10(V1)~V2,data=socketConnection())
lm(log10(V1)~V2,data=`solution+concentration`)
tmp=1
rm()
rm(tmp)
?commandArgs
"al"=="al"
"al"=="9"
NSim = 1000
as.integer('12')
as.character(1)
as.character(14)
as.integer(12.3)
as.integer(12.9)
as.integer(12,9)
as.integer(12,9,3)
library("optparse")
install.packages("optparse")
library("optparse")
?make_option
tmp='hello'
tmp=="hello"
tmp=="hello "
tmp=="hello\n "
tmp=="hell o"
tmp=="hell0"
setwd("~/Documents/Academic/SC/graphon/simulation")
load("/Users/bgemily/Documents/Academic/SC/graphon/simulation/case1_NSim1000_20200221_0113.Rdata")
membership_true1 = c(rep(1,4), rep(2,46))
ARI1 = get_ARI(membership_true1, results1, length(membership_true1))
ARI=ARI1
hist(ARI)
summary(ARI)
boxplot(ARI, ylim=c(0,1.1))
load("/Users/bgemily/Documents/Academic/SC/graphon/simulation/pp_case1_NSim1000_20200221_0042.Rdata")
results1->results1_pp
membership_true1 = c(rep(1,4), rep(2,46))
ARI1 = get_ARI(membership_true1, results1, length(membership_true1))
ARI=ARI1
hist(ARI)
summary(ARI)
boxplot(ARI, ylim=c(0,1.1))
load("/Users/bgemily/Documents/Academic/SC/graphon/simulation/pp_case2_NSim1000_20200221_0113.Rdata")
results2->results2_pp
membership_true2 = c(rep(1,4), rep(2,8), rep(3,46))
ARI2 = get_ARI(membership_true2, results2, length(membership_true2))
ARI=ARI2
hist(ARI)
summary(ARI)
boxplot(ARI, ylim=c(0,1.1))
load("/Users/bgemily/Documents/Academic/SC/graphon/simulation/case2_NSim1000_20200221_0227.Rdata")
membership_true2 = c(rep(1,4), rep(2,8), rep(3,46))
ARI2 = get_ARI(membership_true2, results2, length(membership_true2))
ARI=ARI2
hist(ARI)
summary(ARI)
boxplot(ARI, ylim=c(0,1.1))
load("/Users/bgemily/Documents/Academic/SC/graphon/simulation/pp_case3_NSim1000_20200221_0106.Rdata")
results3->results3_pp
membership_true3 = c(rep(1,4), rep(2,8), rep(3,46))
ARI3 = get_ARI(membership_true3, results3, length(membership_true3))
ARI=ARI2
hist(ARI)
ARI=ARI3
hist(ARI)
summary(ARI)
boxplot(ARI, ylim=c(0,1.1))
load("/Users/bgemily/Documents/Academic/SC/graphon/simulation/case4_NSim100_20200221_2136.Rdata")
membership_true4 = c(rep(1,4), rep(2,8), rep(3,46))
ARI4 = get_ARI(membership_true4, results4, length(membership_true4))
ARI=ARI4
hist(ARI)
summary(ARI)
boxplot(ARI, ylim=c(0,1.1))
ARI4_pp = get_ARI(membership_true4, results4_pp, length(membership_true4))
ARI=ARI4_pp
hist(ARI)
summary(ARI)
boxplot(ARI, ylim=c(0,1.1))
boxplot(c(ARI4, ARI4_pp)~c(rep(1,length(ARI4)), rep(2,length(ARI4_pp))))
head(ARI4)
head(ARI4_pp)
# plot estimated mean pdfâ€™s with true pdf's -------------------------------
total_time = 50
t = seq(0, total_time, 0.05)
# pp = FALSE
r = results4[[5]]
f_center_list = r$f_center_list
clusters = r$clusters
f_list = r$f_list
network = r$network; pdf_list = network$pdf_list
n0_vec = r$n0_ve
for (l in 1:length(clusters)) {
f_center = f_center_list[[l]]
if (pp)   {
pdf_center = tail(f_center,length(t))
plot(t, pdf_center, col = 'red', type='l', xlim = c(0,50), ylim=c(0,.4))
}
else   {
pdf_center = obtain_pdf(tail(f_center,length(t)), t, bw=1)$density
plot(pdf_center, col = 'red', xlim = c(0,50), ylim=c(0,.4), main = '')
}
for (i in (clusters[[l]])) {
lines(t, shift(pdf_list[[i]], n0_vec[i], pad=0))
}
if (pp) lines(t, pdf_center, col = 'red', xlim = c(0,50), ylim=c(0,.4))
else lines(pdf_center, col = 'red', xlim = c(0,50), ylim=c(0,.4))
}
clusters
ARI4[5]
# plot estimated mean pdfâ€™s with true pdf's -------------------------------
total_time = 50
t = seq(0, total_time, 0.05)
# pp = FALSE
r = results4_pp[[5]]
f_center_list = r$f_center_list
clusters = r$clusters
f_list = r$f_list
network = r$network; pdf_list = network$pdf_list
n0_vec = r$n0_ve
for (l in 1:length(clusters)) {
f_center = f_center_list[[l]]
if (pp)   {
pdf_center = tail(f_center,length(t))
plot(t, pdf_center, col = 'red', type='l', xlim = c(0,50), ylim=c(0,.4))
}
else   {
pdf_center = obtain_pdf(tail(f_center,length(t)), t, bw=1)$density
plot(pdf_center, col = 'red', xlim = c(0,50), ylim=c(0,.4), main = '')
}
for (i in (clusters[[l]])) {
lines(t, shift(pdf_list[[i]], n0_vec[i], pad=0))
}
if (pp) lines(t, pdf_center, col = 'red', xlim = c(0,50), ylim=c(0,.4))
else lines(pdf_center, col = 'red', xlim = c(0,50), ylim=c(0,.4))
}
# plot estimated mean pdfâ€™s with true pdf's -------------------------------
total_time = 50
t = seq(0, total_time, 0.05)
# pp = FALSE
r = results4_pp[[6]]
f_center_list = r$f_center_list
clusters = r$clusters
f_list = r$f_list
network = r$network; pdf_list = network$pdf_list
n0_vec = r$n0_ve
for (l in 1:length(clusters)) {
f_center = f_center_list[[l]]
if (pp)   {
pdf_center = tail(f_center,length(t))
plot(t, pdf_center, col = 'red', type='l', xlim = c(0,50), ylim=c(0,.4))
}
else   {
pdf_center = obtain_pdf(tail(f_center,length(t)), t, bw=1)$density
plot(pdf_center, col = 'red', xlim = c(0,50), ylim=c(0,.4), main = '')
}
for (i in (clusters[[l]])) {
lines(t, shift(pdf_list[[i]], n0_vec[i], pad=0))
}
if (pp) lines(t, pdf_center, col = 'red', xlim = c(0,50), ylim=c(0,.4))
else lines(pdf_center, col = 'red', xlim = c(0,50), ylim=c(0,.4))
}
plot(f_center)
plot(f_center,type='l')
plot(f_center,type='l',ylim=c(0,.4))
pp
pp=TRUE
# plot estimated mean pdfâ€™s with true pdf's -------------------------------
total_time = 50
t = seq(0, total_time, 0.05)
# pp = FALSE
r = results4_pp[[6]]
f_center_list = r$f_center_list
clusters = r$clusters
f_list = r$f_list
network = r$network; pdf_list = network$pdf_list
n0_vec = r$n0_ve
for (l in 1:length(clusters)) {
f_center = f_center_list[[l]]
if (pp)   {
pdf_center = tail(f_center,length(t))
plot(t, pdf_center, col = 'red', type='l', xlim = c(0,50), ylim=c(0,.4))
}
else   {
pdf_center = obtain_pdf(tail(f_center,length(t)), t, bw=1)$density
plot(pdf_center, col = 'red', xlim = c(0,50), ylim=c(0,.4), main = '')
}
for (i in (clusters[[l]])) {
lines(t, shift(pdf_list[[i]], n0_vec[i], pad=0))
}
if (pp) lines(t, pdf_center, col = 'red', xlim = c(0,50), ylim=c(0,.4))
else lines(pdf_center, col = 'red', xlim = c(0,50), ylim=c(0,.4))
}
# plot estimated mean pdfâ€™s with true pdf's -------------------------------
total_time = 50
t = seq(0, total_time, 0.05)
# pp = FALSE
r = results4_pp[[5]]
f_center_list = r$f_center_list
clusters = r$clusters
f_list = r$f_list
network = r$network; pdf_list = network$pdf_list
n0_vec = r$n0_ve
for (l in 1:length(clusters)) {
f_center = f_center_list[[l]]
if (pp)   {
pdf_center = tail(f_center,length(t))
plot(t, pdf_center, col = 'red', type='l', xlim = c(0,50), ylim=c(0,.4))
}
else   {
pdf_center = obtain_pdf(tail(f_center,length(t)), t, bw=1)$density
plot(pdf_center, col = 'red', xlim = c(0,50), ylim=c(0,.4), main = '')
}
for (i in (clusters[[l]])) {
lines(t, shift(pdf_list[[i]], n0_vec[i], pad=0))
}
if (pp) lines(t, pdf_center, col = 'red', xlim = c(0,50), ylim=c(0,.4))
else lines(pdf_center, col = 'red', xlim = c(0,50), ylim=c(0,.4))
}
which(ARI4-ARI4_pp>.2)
ARI4[9]
ARI4_pp[9]
# plot estimated mean pdfâ€™s with true pdf's -------------------------------
total_time = 50
t = seq(0, total_time, 0.05)
# pp = FALSE
r = results4_pp[[9]]
f_center_list = r$f_center_list
clusters = r$clusters
f_list = r$f_list
network = r$network; pdf_list = network$pdf_list
n0_vec = r$n0_ve
for (l in 1:length(clusters)) {
f_center = f_center_list[[l]]
if (pp)   {
pdf_center = tail(f_center,length(t))
plot(t, pdf_center, col = 'red', type='l', xlim = c(0,50), ylim=c(0,.4))
}
else   {
pdf_center = obtain_pdf(tail(f_center,length(t)), t, bw=1)$density
plot(pdf_center, col = 'red', xlim = c(0,50), ylim=c(0,.4), main = '')
}
for (i in (clusters[[l]])) {
lines(t, shift(pdf_list[[i]], n0_vec[i], pad=0))
}
if (pp) lines(t, pdf_center, col = 'red', xlim = c(0,50), ylim=c(0,.4))
else lines(pdf_center, col = 'red', xlim = c(0,50), ylim=c(0,.4))
}
# plot estimated mean pdfâ€™s with true pdf's -------------------------------
total_time = 50
t = seq(0, total_time, 0.05)
# pp = FALSE
r = results4_pp[[3]]
f_center_list = r$f_center_list
clusters = r$clusters
f_list = r$f_list
network = r$network; pdf_list = network$pdf_list
n0_vec = r$n0_ve
for (l in 1:length(clusters)) {
f_center = f_center_list[[l]]
if (pp)   {
pdf_center = tail(f_center,length(t))
plot(t, pdf_center, col = 'red', type='l', xlim = c(0,50), ylim=c(0,.4))
}
else   {
pdf_center = obtain_pdf(tail(f_center,length(t)), t, bw=1)$density
plot(pdf_center, col = 'red', xlim = c(0,50), ylim=c(0,.4), main = '')
}
for (i in (clusters[[l]])) {
lines(t, shift(pdf_list[[i]], n0_vec[i], pad=0))
}
if (pp) lines(t, pdf_center, col = 'red', xlim = c(0,50), ylim=c(0,.4))
else lines(pdf_center, col = 'red', xlim = c(0,50), ylim=c(0,.4))
}
# plot estimated mean pdfâ€™s with true pdf's -------------------------------
total_time = 50
t = seq(0, total_time, 0.05)
pp = FALSE
r = results4[[3]]
f_center_list = r$f_center_list
clusters = r$clusters
f_list = r$f_list
network = r$network; pdf_list = network$pdf_list
n0_vec = r$n0_ve
for (l in 1:length(clusters)) {
f_center = f_center_list[[l]]
if (pp)   {
pdf_center = tail(f_center,length(t))
plot(t, pdf_center, col = 'red', type='l', xlim = c(0,50), ylim=c(0,.4))
}
else   {
pdf_center = obtain_pdf(tail(f_center,length(t)), t, bw=1)$density
plot(pdf_center, col = 'red', xlim = c(0,50), ylim=c(0,.4), main = '')
}
for (i in (clusters[[l]])) {
lines(t, shift(pdf_list[[i]], n0_vec[i], pad=0))
}
if (pp) lines(t, pdf_center, col = 'red', xlim = c(0,50), ylim=c(0,.4))
else lines(pdf_center, col = 'red', xlim = c(0,50), ylim=c(0,.4))
}
boxplot(c(ARI4, ARI4_pp)~c(rep(1,length(ARI4)), rep(2,length(ARI4_pp))))
head(ARI4_pp)
source('~/Documents/Academic/SC/graphon/simulation/functions/cluster_point_proc.R')
