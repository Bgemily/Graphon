tau_vec = network$tau_vec
tau_mat = network$tau_mat
true_pdf_fun_list = network$true_pdf_fun_list
membership_true = network$membership_true
t_vec = network$t_vec
dist_thres = network$dist_thres
pairwise_dist = network$pairwise_dist
clusters_true = mem2clus(membership_true)
clus_result = r$clus_result
clusters_est = clus_result$clusters
center_pdf_array = clus_result$center_pdf_array
clusters_history = clus_result$clusters_history
membership_est = clus2mem(clusters_est)
par(mar=c(2.5,2.5,.5,.5))
clusters_est
clusters_history
res_overclus = clus_result$res_overclus
res_overclus$clusters
res_overclus$clusters_overclus_merge
source('~/Documents/Academic/SC/graphon/simulation/functions/do_cluster.R')
get_node_pdf_array
est_n0_vec
source('~/Documents/Academic/SC/graphon/simulation/functions/init_kmeans.R')
source('~/Documents/Academic/SC/graphon/simulation/functions/kmeanspp.R')
{if(FALSE)print("1")}
{if(FALSE)print("1")
else print("2")}
source('~/Documents/Academic/SC/graphon/simulation/functions/do_cluster.R')
source('~/Documents/Academic/SC/graphon/simulation/functions/do_cluster.R')
source('~/Documents/Academic/SC/graphon/simulation/functions/do_cluster.R')
main(case=2, SEED=SEED, N_clus=3, N_overclus=5, MaxIter = 30)->r
main
rm(list=ls())
file_path = "./functions"
file.sources = list.files(path = file_path, pattern = "*.R$", full.names = TRUE)
sapply(file.sources, source)
main(case=2, SEED=SEED, N_clus=3, N_overclus=5, MaxIter = 30)->r
# debug
SEED_vec = seq(189,110765,length.out=100)
i=14
SEED = SEED_vec[i]
main(case=2, SEED=SEED, N_clus=3, N_overclus=5, MaxIter = 30)->r
source('~/Documents/Academic/SC/graphon/simulation/./functions/do_cluster.R', echo=TRUE)
main(case=2, SEED=SEED, N_clus=3, N_overclus=5, MaxIter = 30)->r
source('~/Documents/Academic/SC/graphon/simulation/./functions/do_cluster.R', echo=TRUE)
main(case=2, SEED=SEED, N_clus=3, N_overclus=5, MaxIter = 30)->r
debugSource('~/Documents/Academic/SC/graphon/simulation/functions/get_node_pdf_array.R', echo=TRUE)
source('~/Documents/Academic/SC/graphon/simulation/./functions/cluster_kmeans_overclus.R', echo=TRUE)
main(case=2, SEED=SEED, N_clus=3, N_overclus=5, MaxIter = 30)->r
edge_time_submat_1
var(edge_time_submat_1[is.finite(edge_time_submat_1)])
tau_vec
time_unit
t_vec
bw
source('~/Documents/Academic/SC/graphon/simulation/./functions/do_cluster.R', echo=TRUE)
main(case=2, SEED=SEED, N_clus=3, N_overclus=5, MaxIter = 30)->r
tau_vec
time_unit
t_vec
main(case=2, SEED=SEED, N_clus=3, N_overclus=5, MaxIter = 30)->r
t_vec
source('~/Documents/Academic/SC/graphon/simulation/./functions/main.R', echo=TRUE)
main(case=2, SEED=SEED, N_clus=3, N_overclus=5, MaxIter = 30)->r
r$clus_result$clusters
load("/Users/bgemily/Documents/Academic/SC/graphon/simulation/case2_NSim100_20200416_1935.Rdata")
# ARI ---------------------------------------------------------------------
results = results2
membership_true = results[[1]]$network$membership_true
clusters_list = lapply(results, function(x)x$clus_result$clusters)
ARI = get_ARI(membership_true, clusters_list)
clusters_list_overclus = lapply(results, function(x)x$clus_result$res_overclus$clusters)
ARI_overclus = get_ARI(membership_true, clusters_list_overclus)
clusters_list_exaclus = lapply(results, function(x)x$clus_result$res_overclus$clusters_exaclus)
ARI_specc_exact = get_ARI(membership_true, clusters_list_exaclus)
plot_jitter_boxplot(ARI=c(ARI_overclus, ARI),
group=c(rep('overclus (k=5) and merge',length(ARI_overclus)),
rep('spec (k=3)',length(ARI_specc_exact)),
rep('algorithm',length(ARI))) )
plot_jitter_boxplot(ARI=c(ARI_overclus,ARI_specc_exact, ARI),
group=c(rep('overclus (k=5) and merge',length(ARI_overclus)),
rep('spec (k=3)',length(ARI_specc_exact)),
rep('algorithm',length(ARI))) )
outlier = which(ARI<.6)
ARI_overclus[outlier]
ARI_exaclus = ARI_specc_exact
rm
rm(ARI_specc_exact)
ARI_exaclus[outlier]
ARI_overclus[outlier]
ARI[outlier]
clusters_list = lapply(results, function(x)x$clus_result$clusters)
clusters_list[outlier[1]]
# Setup  ------------------------------------------------------------------
total_time = 50
time_unit = 0.05
t = seq(0, total_time, 0.05)
r = results2[[1]]
network = r$network
edge_time_mat = network$edge_time_mat
node_loc_mat = network$node_loc_mat
tau_vec = network$tau_vec
tau_mat = network$tau_mat
true_pdf_fun_list = network$true_pdf_fun_list
membership_true = network$membership_true
t_vec = network$t_vec
dist_thres = network$dist_thres
pairwise_dist = network$pairwise_dist
clusters_true = mem2clus(membership_true)
clus_result = r$clus_result
clusters_est = clus_result$clusters
center_pdf_array = clus_result$center_pdf_array
clusters_history = clus_result$clusters_history
res_overclus = clus_result$res_overclus
membership_est = clus2mem(clusters_est)
par(mar=c(2.5,2.5,.5,.5))
outlier
# Show estimated center_pdf_array (for one subject) ------------------------------------------
# need to find permutation of clusters that matches the est_pdf_array and true_pdf_array
pdf_true_array = fun2pdfarray(true_pdf_fun_list, tau_mat, membership_true)
plot_pdf_array(center_pdf_array, pdf_true_array)
is.list(tmp)
?list
tmp=matrix(1:4,2,2)
list(tmp)
list(c(tmp))
list(c(1:4))
list(1:4)
source('~/Documents/Academic/SC/graphon/simulation/functions/plot_pdf_array.R', echo=TRUE)
plot_pdf_array(center_pdf_array, pdf_true_array)
plot_pdf_array(pdf_array_list = center_pdf_array, pdf_true_array = pdf_true_array)
center_pdf_array
debugSource('~/Documents/Academic/SC/graphon/simulation/functions/plot_pdf_array.R')
plot_pdf_array(pdf_array_list = center_pdf_array, pdf_true_array = pdf_true_array)
pdf_array_list[[1]][q,l,]
dim(pdf_array_list)
is.list(pdf_array_list)
list(pdf_array_list)
list(pdf_array_list)[[1]]
!is.list(pdf_array_list)
pdf_array_list = list(pdf_array_list)
length(pdf_array_list)
dim(pdf_array_list)
debugSource('~/Documents/Academic/SC/graphon/simulation/functions/plot_pdf_array.R')
plot_pdf_array(pdf_array_list = center_pdf_array, pdf_true_array = pdf_true_array)
!is.list(pdf_array_list)
pdf_array_list[[1]][q,l,]
debugSource('~/Documents/Academic/SC/graphon/simulation/functions/plot_pdf_array.R')
debugSource('~/Documents/Academic/SC/graphon/simulation/functions/plot_pdf_array.R')
plot_pdf_array(pdf_array_list = center_pdf_array, pdf_true_array = pdf_true_array)
match_clusters
results = results2
pdf_true_array = fun2pdfarray(results[[1]]$network$true_pdf_fun_list,
results[[1]]$network$tau_mat, results[[1]]$network$membership_true)
pdf_array_list = lapply(results, function(r)r$clus_result$center_pdf_array)
clusters_list = lapply(results, function(x)x$clus_result$clusters)
# permutate clusters and pdf_array's for each subject
res = match_clusters(clusters_list = clusters_list, pdf_array_list = pdf_array_list,
pdf_true_array = pdf_true_array)
# Confidence band of center_pdf_array -------------------------------------
results = results2
pdf_true_array = fun2pdfarray(results[[1]]$network$true_pdf_fun_list,
results[[1]]$network$tau_mat, results[[1]]$network$membership_true)
pdf_array_list = lapply(results, function(r)r$clus_result$center_pdf_array)
clusters_list = lapply(results, function(x)x$clus_result$clusters)
# # permutate clusters and pdf_array's for each subject
# res = match_clusters(clusters_list = clusters_list, pdf_array_list = pdf_array_list,
#                      pdf_true_array = pdf_true_array)
# clusters_list = res$clusters_list
# pdf_array_list = res$pdf_array_list
N_clus = dim(pdf_true_array)[1]
plot_pdf_array(pdf_array_list = pdf_array_list, pdf_true_array = pdf_true_array)
source('~/Documents/Academic/SC/graphon/simulation/functions/plot_pdf_array.R')
plot_pdf_array(pdf_array_list = pdf_array_list[1:10], pdf_true_array = pdf_true_array)
main
i=1
SEED = SEED_vec[i]
main(case=2, SEED=SEED, N_clus=3, N_overclus=5, MaxIter = 30, bw=0.5)->r
r$clus_result$clusters
network = r$network
edge_time_mat = network$edge_time_mat
node_loc_mat = network$node_loc_mat
tau_vec = network$tau_vec
tau_mat = network$tau_mat
true_pdf_fun_list = network$true_pdf_fun_list
membership_true = network$membership_true
t_vec = network$t_vec
dist_thres = network$dist_thres
pairwise_dist = network$pairwise_dist
clusters_true = mem2clus(membership_true)
clus_result = r$clus_result
clusters_est = clus_result$clusters
center_pdf_array = clus_result$center_pdf_array
clusters_history = clus_result$clusters_history
res_overclus = clus_result$res_overclus
membership_est = clus2mem(clusters_est)
pdf_true_array = fun2pdfarray(true_pdf_fun_list, tau_mat, membership_true)
plot_pdf_array(pdf_array_list = center_pdf_array, pdf_true_array = pdf_true_array)
main
main
get_center_pdf_array
# get center_pdf_array
center_pdf_array = get_center_pdf_array(edge_time_mat = edge_time_mat, clusters = clusters, n0_vec = n0_vec, t_vec = t_vec, bw = bw)
main(case=2, SEED=SEED, N_clus=3, N_overclus=5, MaxIter = 30, bw=0.5)->r
clus_result = r$clus_result
clusters_est = clus_result$clusters
center_pdf_array = clus_result$center_pdf_array
clusters_history = clus_result$clusters_history
res_overclus = clus_result$res_overclus
membership_est = clus2mem(clusters_est)
clusters_est
plot_pdf_array(pdf_array_list = center_pdf_array, pdf_true_array = pdf_true_array)
t_vec
bw
center_pdf_array = get_center_pdf_array(edge_time_mat = edge_time_mat, clusters = clusters_est, n0_vec = n0_vec, t_vec = t_vec, bw = .5)
n0_vec = clus_result$n0_vec
center_pdf_array = get_center_pdf_array(edge_time_mat = edge_time_mat, clusters = clusters_est, n0_vec = n0_vec, t_vec = t_vec, bw = .5)
plot_pdf_array(pdf_array_list = center_pdf_array, pdf_true_array = pdf_true_array)
plot_pdf_array(pdf_array_list = pdf_array_list[1:10], pdf_true_array = pdf_true_array)
plot_pdf_array(pdf_array_list = pdf_array_list[1:20], pdf_true_array = pdf_true_array)
dist_mat
cmdscale
?cmdscale
r = results2[[1]]
edge_time_mat = r$network$edge_time_mat
t_vec = r$network$t_vec
bw = 1
N_node = nrow(edge_time_mat)
node_pdf_array = get_node_pdf_array(edge_time_mat = edge_time_mat, clusters = list(c(1:N_node)),
n0_vec = numeric(N_node), t_vec = t_vec, bw = bw)
n0_vec_init = est_n0_vec(edge_time_mat = edge_time_mat, clusters = list(c(1:N_node)), t_vec = t_vec, bw = bw)
aligned_pdf_mat = t(sapply(1:N_node, function(i)shift(node_pdf_array[i,1,], n0_vec_init[i], pp=TRUE)))
rdist::pdist(aligned_pdf_mat)
ARI_overclus
ARI_exaclus[5]
r = results2[[5]]
edge_time_mat = r$network$edge_time_mat
t_vec = r$network$t_vec
bw = 1
membership_true = r$network$membership_true
clusters_exaclus = r$clus_result$res_overclus$clusters_exaclus
membership_exaclus = clus2mem(clusters_exaclus)
N_node = nrow(edge_time_mat)
node_pdf_array = get_node_pdf_array(edge_time_mat = edge_time_mat, clusters = list(c(1:N_node)),
n0_vec = numeric(N_node), t_vec = t_vec, bw = bw)
n0_vec_init = est_n0_vec(edge_time_mat = edge_time_mat, clusters = list(c(1:N_node)), t_vec = t_vec, bw = bw)
aligned_pdf_mat = t(sapply(1:N_node, function(i)shift(node_pdf_array[i,1,], n0_vec_init[i], pp=TRUE)))
dist_mat = rdist::pdist(aligned_pdf_mat)
X = cmdscale(dist_mat, k=2)
plot(X, pch=membership_true, col=membership_exaclus)
X = cmdscale(dist_mat, k=4)
tmp = tsne::tsne(X, k=2)
tmp->tsne
plot(tsne, pch=membership_true, col=membership_exaclus)
clusters_overclus = r$clus_result$res_overclus$clusters_overclus
membership_overclus = clus2mem(clusters_overclus)
plot(tsne, pch=membership_true, col=membership_overclus)
tsne = tsne::tsne(X, k=2)
plot(tsne, pch=membership_true, col=membership_exaclus)
plot(tsne, pch=membership_true, col=membership_overclus)
X = cmdscale(dist_mat, k=4)
set.seed(831)
tsne = tsne::tsne(X, k=2)
plot(tsne, pch=membership_true, col=membership_exaclus)
tsne = tsne::tsne(aligned_pdf_mat, k=2)
plot(tsne, pch=membership_true, col=membership_exaclus)
X = cmdscale(dist_mat, k=6)
set.seed(831)
tsne = tsne::tsne(X, k=2)
plot(tsne, pch=membership_true, col=membership_exaclus)
plot(tsne, pch=membership_true, col=membership_overclus)
X = cmdscale(dist_mat, k=5)
set.seed(831)
tsne = tsne::tsne(X, k=2)
plot(tsne, pch=membership_true, col=membership_exaclus)
plot(tsne, pch=membership_true, col=membership_overclus)
X = cmdscale(dist_mat, k=50)
set.seed(831)
tsne = tsne::tsne(X, k=2)
plot(tsne, pch=membership_true, col=membership_exaclus)
plot(tsne, pch=membership_true, col=membership_overclus)
X = cmdscale(dist_mat, k=3)
set.seed(831)
tsne = tsne::tsne(X, k=2)
plot(tsne, pch=membership_true, col=membership_exaclus)
plot(tsne, pch=membership_true, col=membership_overclus)
X = cmdscale(dist_mat, k=7)
set.seed(831)
tsne = tsne::tsne(X, k=2)
plot(tsne, pch=membership_true, col=membership_exaclus)
plot(tsne, pch=membership_true, col=membership_overclus)
X = cmdscale(dist_mat, k=4)
set.seed(831)
tsne = tsne::tsne(X, k=2)
plot(tsne, pch=membership_true, col=membership_exaclus)
plot(tsne, pch=membership_true, col=membership_overclus)
set.seed(831)
tsne = tsne::tsne(X, k=2)
plot(tsne, pch=membership_true, col=membership_exaclus)
set.seed(83)
tsne = tsne::tsne(X, k=2)
plot(tsne, pch=membership_true, col=membership_exaclus)
plot(tsne, pch=membership_true, col=membership_overclus)
set.seed(839)
tsne = tsne::tsne(X, k=2)
plot(tsne, pch=membership_true, col=membership_exaclus)
set.seed(89)
tsne = tsne::tsne(X, k=2)
plot(tsne, pch=membership_true, col=membership_exaclus)
set.seed(9)
tsne = tsne::tsne(X, k=2)
plot(tsne, pch=membership_true, col=membership_exaclus)
plot(tsne, pch=membership_true, col=membership_overclus)
set.seed(90)
tsne = tsne::tsne(X, k=2)
plot(tsne, pch=membership_true, col=membership_exaclus)
plot(tsne, pch=membership_true, col=membership_overclus)
n0_vec = est_n0_vec(edge_time_mat = edge_time_mat, clusters = clusters_overclus, t_vec = t_vec, bw = bw)
node_pdf_array2 = get_node_pdf_array(edge_time_mat = edge_time_mat, clusters = clusters_overclus,
n0_vec = n0_vec, t_vec = t_vec, bw = bw)
degree_mat = get_node_degree_mat(edge_time_mat = edge_time_mat, clusters = clusters_overclus)
dist_mat2 = pairwise_dist_mat(node_pdf_array2, degree_mat = degree_mat)$dist_mat
rdist::pdist
clusters_est = r$clus_result$clusters
clusters_merged = r$clus_result$res_overclus$clusters
membership_merged = clus2mem(clusters_merged)
X2 = cmdscale(dist_mat2, k=4)
set.seed(90)
tsne2 = tsne::tsne(X2, k=2)
plot(tsne2, pch=membership_true, col=membership_overclus)
X2 = cmdscale(dist_mat2, k=2)
plot(X2, pch=membership_true, col=membership_overclus)
X2 = cmdscale(dist_mat2, k=3)
plot(X2, pch=membership_true, col=membership_overclus)
plot(X, pch=membership_true, col=membership_overclus)
plot(cmdscale(dist_mat, k=2), pch=membership_true, col=membership_overclus)
plot(X2, pch=membership_true, col=membership_overclus)
plot(tX2, pch=membership_true, col=membership_merged)
plot(X2, pch=membership_true, col=membership_merged)
set.seed(90)
tsne2 = tsne::tsne(X2, k=2)
plot(tsne2, pch=membership_true, col=membership_overclus)
plot(tsne2, pch=membership_true, col=membership_merged)
X2 = cmdscale(dist_mat2, k=4)
set.seed(90)
tsne2 = tsne::tsne(X2, k=2)
plot(tsne2, pch=membership_true, col=membership_overclus)
plot(tsne, pch=membership_true, col=membership_exaclus)
plot(tsne, pch=membership_true, col=membership_overclus)
plot(tsne2, pch=membership_true, col=membership_overclus)
plot(tsne2, pch=membership_true, col=membership_merged)
save.image("~/Documents/Academic/SC/graphon/simulation/overclus_res.RData")
load("/Users/bgemily/Documents/Academic/SC/graphon/simulation/case2_NSim100_Noverclus6_20200416_2233.Rdata")
# ARI ---------------------------------------------------------------------
results = results2
membership_true = results[[1]]$network$membership_true
clusters_list = lapply(results, function(x)x$clus_result$clusters)
ARI = get_ARI(membership_true, clusters_list)
clusters_list_overclus = lapply(results, function(x)x$clus_result$res_overclus$clusters)
ARI_overclus = get_ARI(membership_true, clusters_list_overclus)
clusters_list_exaclus = lapply(results, function(x)x$clus_result$res_overclus$clusters_exaclus)
ARI_exaclus = get_ARI(membership_true, clusters_list_exaclus)
plot_jitter_boxplot(ARI=c(ARI_overclus,ARI_exaclus, ARI),
group=c(rep('overclus (k=5) and merge',length(ARI_overclus)),
rep('spec (k=3)',length(ARI_exaclus)),
rep('algorithm',length(ARI))) )
do_cluster
plot(tsne2, pch=membership_true, col=membership_merged, xaxt='n')
?xaxt
??xaxt
plot(tsne2, pch=membership_true, col=membership_merged, xaxt='n', yaxt='n')
par(mar=c(0.1,0.1,0.1,0.1))
plot(tsne2, pch=membership_true, col=membership_merged, xaxt='n', yaxt='n')
par(mar=c(0.1,0.1,0.1,0.1), xaxt="n", yaxt='n')
plot(tsne2, pch=membership_true, col=membership_overclus)
plot(tsne, pch=membership_true, col=membership_exaclus)
rdist::pdist(tsne)-dist_mat
dist_mat
rdist::pdist(X)
rdist::pdist(X)-dist_mat
(rdist::pdist(X)-dist_mat)/dist_mat
hist((rdist::pdist(X)-dist_mat)/dist_mat)
hist((rdist::pdist(X)-dist_mat)/dist_mat, xaxt='')
hist((rdist::pdist(X)-dist_mat)/dist_mat, xaxt='p')
hist((rdist::pdist(X)-dist_mat)/dist_mat, xaxt='l')
hist((rdist::pdist(X)-dist_mat)/dist_mat)
boxplot((rdist::pdist(X)-dist_mat)/dist_mat)
boxplot(as.vector(rdist::pdist(X)-dist_mat)/dist_mat)
boxplot(as.vector((rdist::pdist(X)-dist_mat)/dist_mat))
summary((rdist::pdist(X)-dist_mat)/dist_mat)
summary(as.vector((rdist::pdist(X)-dist_mat)/dist_mat))
image(X)
image(dist_mat)
image(rdist::pdist(X))
image(rdist::pdist(tsne))
image(rdist::pdist(tsne2))
image(dist_mat2)
image(rdist::pdist(X2))
plot(X2, pch=membership_true, col=membership_overclus)
plot(tsne2, pch=membership_true, col=membership_merged)
plot(X2, pch=membership_true, col=membership_merged)
plot(X, pch=membership_true, col=membership_exaclus)
plot(tsne, pch=membership_true, col=membership_overclus)
plot(X, pch=membership_true, col=membership_overclus)
plot(X, pch=membership_true, col=membership_exaclus)
plot(X, pch=membership_true, col=membership_overclus)
tsne
plot(tsne, pch=membership_true, col=membership_overclus)
plot(tsne, pch=membership_true, col=membership_exaclus)
?prcomp
#pca
mypca = prcomp(dist_mat, center=TRUE, scale. = TRUE)
summary(mypca)
names(mypca)
plot(mypca$sdev[3,])
names(summary(mupca))
names(summary(mypca))
summary(mypca)$sdev
summary(mypca)$importance
plot(summary(mypca)$importance[3,])
library(devtools)
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("vqv/ggbiplot")
library(ggbiplot)
ggbiplot(mypca)
?ggbiplot
plot(tsne, pch=membership_true, col=membership_exaclus)
plot(tsne, pch=membership_true, col=membership_overclus)
plot(X2, pch=membership_true, col=membership_overclus)
plot(X2, pch=membership_true, col=membership_merged)
plot(X, pch=membership_true, col=membership_exaclus)
plot(X, pch=membership_true, col=membership_overclus)
X = cmdscale(dist_mat, k=3)
plot(X, pch=membership_true, col=membership_exaclus)
plot(X, pch=membership_true, col=membership_overclus)
X = cmdscale(dist_mat, k=4)
plot(X, pch=membership_true, col=membership_exaclus)
plot(X, pch=membership_true, col=membership_overclus)
plot(X[,c(1,3)], pch=membership_true, col=membership_overclus)
plot(X[,c(2,3)], pch=membership_true, col=membership_overclus)
plot(tsne, pch=membership_true, col=membership_exaclus)
plot(tsne, pch=membership_true, col=membership_overclus)
plot(tsne2, pch=membership_true, col=membership_overclus)
plot(tsne2, pch=membership_true, col=membership_merged)
plot_jitter_boxplot(ARI=c(ARI_overclus,ARI_exaclus, ARI),
group=c(rep('overclus (k=5) and merge',length(ARI_overclus)),
rep('spec (k=3)',length(ARI_exaclus)),
rep('algorithm',length(ARI))) )
source('~/Documents/Academic/SC/graphon/simulation/functions/plot_jitter_boxplot.R', echo=TRUE)
source('~/Documents/Academic/SC/graphon/simulation/functions/plot_jitter_boxplot.R')
plot_jitter_boxplot(ARI=c(ARI_overclus,ARI_exaclus, ARI),
group=c(rep('overclus (k=5) and merge',length(ARI_overclus)),
rep('spec (k=3)',length(ARI_exaclus)),
rep('algorithm',length(ARI))) )
source('~/Documents/Academic/SC/graphon/simulation/functions/plot_jitter_boxplot.R')
source('~/Documents/Academic/SC/graphon/simulation/functions/plot_jitter_boxplot.R')
plot_jitter_boxplot(ARI=c(ARI_overclus,ARI_exaclus, ARI),
group=c(rep('overclus (k=5) and merge',length(ARI_overclus)),
rep('spec (k=3)',length(ARI_exaclus)),
rep('algorithm',length(ARI))) )
load("/Users/bgemily/Documents/Academic/SC/graphon/simulation/overclus_res.RData")
source('~/Documents/Academic/SC/graphon/simulation/functions/plot_jitter_boxplot.R')
plot_jitter_boxplot(ARI=c(ARI_overclus,ARI_exaclus, ARI),
group=c(rep('overclus (k=5) and merge',length(ARI_overclus)),
rep('spec (k=3)',length(ARI_exaclus)),
rep('algorithm',length(ARI))) )
source('~/Documents/Academic/SC/graphon/simulation/functions/plot_jitter_boxplot.R')
plot_jitter_boxplot(ARI=c(ARI_overclus,ARI_exaclus, ARI),
group=c(rep('overclus (k=5) and merge',length(ARI_overclus)),
rep('spec (k=3)',length(ARI_exaclus)),
rep('algorithm',length(ARI))) )
source('~/Documents/Academic/SC/graphon/simulation/functions/plot_jitter_boxplot.R')
plot_jitter_boxplot(ARI=c(ARI_overclus,ARI_exaclus, ARI),
group=c(rep('overclus (k=5) and merge',length(ARI_overclus)),
rep('spec (k=3)',length(ARI_exaclus)),
rep('algorithm',length(ARI))) )
debugSource('~/Documents/Academic/SC/graphon/simulation/functions/plot_jitter_boxplot.R')
plot_jitter_boxplot(ARI=c(ARI_overclus,ARI_exaclus, ARI),
group=c(rep('overclus (k=5) and merge',length(ARI_overclus)),
rep('spec (k=3)',length(ARI_exaclus)),
rep('algorithm',length(ARI))) )
p = ggplot(data_frame, aes(x=group, y=ARI, group=group)) + geom_violin()
p + geom_boxplot(width=0.1,outlier.shape=NA)
p + stat_summary(fun.data = "mean_sdl", mult=1, geom="pointrange", color='red')
install.packages("Hmisc")
p + geom_boxplot(width=0.1,outlier.shape=NA)
# geom_jitter(position=position_jitter(width=.1, height=0))
}
p + stat_summary(fun.data = "mean_sdl", mult=1, geom="pointrange", color='red')
install.packages("Hmisc")
?stat_summary
?fun.data
?mean_sdl
p + stat_summary(fun.data = "smean.sdl", mult=1, geom="pointrange", color='red')
debugSource('~/Documents/Academic/SC/graphon/simulation/functions/plot_jitter_boxplot.R')
plot_jitter_boxplot(ARI=c(ARI_overclus,ARI_exaclus, ARI),
group=c(rep('overclus (k=5) and merge',length(ARI_overclus)),
rep('spec (k=3)',length(ARI_exaclus)),
rep('algorithm',length(ARI))) )
p = ggplot(data_frame, aes(x=group, y=ARI, group=group)) + geom_violin()
p + geom_boxplot(width=0.1,outlier.shape=NA)
p + stat_summary(fun.data = "smean.sdl", mult=1, geom="pointrange", color='red')
?stat_summary
?install.packages
install.packages("Hmisc")
version
version
?rdist::pdist
rdist::pdist
setwd(dir = "~/Documents/Academic/DeLa/Sample Code/")
