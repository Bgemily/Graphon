hat_F_qk_vec
theta = fft(hat_F_qk_vec)[-1]
l_vec = 1:(length(t_vec)-1)
n0 = -10
theta_hat = theta*exp(1i*2*pi*(-n0/length(t_vec))*l_vec) +
(exp(1i*2*pi*(-n0/length(t_vec))*l_vec)-1) /
(1-exp(-1i*2*pi*(1/length(t_vec))*l_vec)) *
tail(hat_F_qk_vec,1)
# shifted_hat_F_qk_vec = c(rep(0,n0), hat_F_qk_vec[1:(length(hat_F_qk_vec)-n0)])
shifted_hat_F_qk_vec = c(hat_F_qk_vec[(abs(n0)+1):(length(hat_F_qk_vec))], rep(1,abs(n0)))
identical(theta_hat, fft(shifted_hat_F_qk_vec)[-1])
theta_hat[1:3]
fft(shifted_hat_F_qk_vec)[1:4]
### Debug
theta = fft(hat_F_qk_vec)[-1]
l_vec = 1:(length(t_vec)-1)
n0 = -10
theta
1i*2*pi*((-n0)/length(t_vec))
theta = fft(hat_F_qk_vec)[-1]
l_vec = 1:(length(t_vec)-1)
n0 = -10
theta_hat = theta*exp(1i*2*pi*((-n0)/length(t_vec))*l_vec) +
(exp(1i*2*pi*((-n0)/length(t_vec))*l_vec)-1) /
(1-exp(-1i*2*pi*(1/length(t_vec))*l_vec)) *
tail(hat_F_qk_vec,1)
# shifted_hat_F_qk_vec = c(rep(0,n0), hat_F_qk_vec[1:(length(hat_F_qk_vec)-n0)])
shifted_hat_F_qk_vec = c(hat_F_qk_vec[(abs(n0)+1):(length(hat_F_qk_vec))], rep(1,abs(n0)))
identical(theta_hat, fft(shifted_hat_F_qk_vec)[-1])
theta_hat[1:3]
fft(shifted_hat_F_qk_vec)[1:4]
fft(shifted_hat_F_qk_vec)[-1][1:3]
theta_hat[1:3]
fft(shifted_hat_F_qk_vec)[-1][1:3]
which(theta_hat != fft(shifted_hat_F_qk_vec)[-1])
theta_hat[1:3]
fft(shifted_hat_F_qk_vec)[-1][1:3]
identical(theta_hat[1:3], fft(shifted_hat_F_qk_vec)[-1][1:3])
tail(theta_hat)[1:3]
tail(fft(shifted_hat_F_qk_vec)[-1])[1:3]
theta = fft(hat_F_qk_vec)[-1]
l_vec = 1:(length(t_vec)-1)
n0 = 10
theta_hat = theta*exp(1i*2*pi*((-n0)/length(t_vec))*l_vec) +
(exp(1i*2*pi*((-n0)/length(t_vec))*l_vec)-1) /
(1-exp(-1i*2*pi*(1/length(t_vec))*l_vec)) *
tail(hat_F_qk_vec,1)
shifted_hat_F_qk_vec = c(rep(0,n0), hat_F_qk_vec[1:(length(hat_F_qk_vec)-n0)])
# shifted_hat_F_qk_vec = c(hat_F_qk_vec[(abs(n0)+1):(length(hat_F_qk_vec))], rep(1,abs(n0)))
which(theta_hat != fft(shifted_hat_F_qk_vec)[-1])
tail(theta_hat)[1:3]
tail(fft(shifted_hat_F_qk_vec)[-1])[1:3]
debugSource('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
sum(A*Conj(B))
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
gradient_vec * 1e-4
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
gradient_vec * 1e-4
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
gradient_vec * 1e-4
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
debugSource('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
sqrt(sum((unlist(n0_vec_list_update)-unlist(n0_vec_list_current))^2))/
sqrt(sum((unlist(n0_vec_list_current)+.Machine$double.eps)^2))
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
gradient_vec * 1e-4
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
plot(y=n0_vec*t_unit,x=(network$tau_vec[1:clus_size]-min(network$tau_vec[1:clus_size])))
abline(a=0,b=1,col=2)
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
edge_time_mat_list = list(edge_time_mat)
clusters_list = list(mem2clus(network$membership_true))
clusters_list
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
res$loss_history
n0_vec = res$n0_vec_list[[1]]
n0_vec
# plot(y=n0_vec*t_unit,x=(network$tau_vec[1:clus_size]-min(network$tau_vec[1:clus_size])))
plot(y=n0_vec*t_unit,x=(network$tau_vec)))
# plot(y=n0_vec*t_unit,x=(network$tau_vec[1:clus_size]-min(network$tau_vec[1:clus_size])))
plot(y=n0_vec*t_unit,x=(network$tau_vec))
abline(a=0,b=1,col=2)
plot(res$loss_history)
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
order(c(1,3,2,1))
n0_vec_list
debugSource('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
n0_vec_list
lapply(n0_vec_list, order)
?ifelse
debugSource('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
debugSource('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
i = n0_order_list[[m]][order_ind]
### Get min_n0 and max_n0
if(order_ind>=2 & order_ind<N_node_list[[m]]){
pre_ind = n0_order_list[[m]][order_ind-1]
min_n0 = n0_vec_list_current[pre_ind]
post_ind = n0_order_list[[m]][order_ind+1]
max_n0 = n0_vec_list_current[post_ind]
}
else if(order_ind==1){
min_n0 = -max(t_vec)/t_unit
post_ind = n0_order_list[[m]][order_ind+1]
max_n0 = n0_vec_list_current[post_ind]
}
else{
pre_ind = n0_order_list[[m]][order_ind-1]
min_n0 = n0_vec_list_current[pre_ind]
max_n0 = max(t_vec)/t_unit
}
order_ind==1
min_n0 = -max(t_vec)/t_unit
post_ind = n0_order_list[[m]][order_ind+1]
max_n0 = n0_vec_list_current[post_ind]
pre_ind = n0_order_list[[m]][order_ind-1]
min_n0 = n0_vec_list_current[pre_ind]
max_n0 = max(t_vec)/t_unit
min_n0 = -max(t_vec)/t_unit
post_ind = n0_order_list[[m]][order_ind+1]
max_n0 = n0_vec_list_current[post_ind]
shifted_edge_time_mat = edge_time_mat_list[[m]] - n0_vec2mat(n0_vec_list_current[[m]])*t_unit
diag(shifted_edge_time_mat) = NA
q = membership_list[[m]][i] #z_mi
A = matrix(nrow=N_clus, ncol=length(t_vec)-1)
B = matrix(nrow=N_clus, ncol=length(t_vec)-1)
C = vector(length=N_clus)
for (k in 1:N_clus) {
### Define frequency vector ###
l_vec = 1:(length(t_vec)-1)
l_vec = c(tail(l_vec, length(l_vec)/2)-length(t_vec),
head(l_vec, length(l_vec)/2))
### ### ###
### Compute A[k,] ###
J_mki = which(membership_list[[m]]==k & n0_vec_list_current[[m]]<=n0_vec_list_current[[m]][i])
J_mki = setdiff(J_mki, i)
if (length(J_mki) > 0){
DdotQ_mki_vec = -length(J_mki) * ecdf(edge_time_mat_list[[m]][i,J_mki])(t_vec)
}
else{
DdotQ_mki_vec = rep(0, length(t_vec))
}
fft_DdotQ_mki_vec = fft(DdotQ_mki_vec)[-1]
fft_DdotQ_mki_vec = c(tail(fft_DdotQ_mki_vec, length(fft_DdotQ_mki_vec)/2),
head(fft_DdotQ_mki_vec, length(fft_DdotQ_mki_vec)/2))
A[k,] = 1i*2*pi*(l_vec/length(t_vec)) *
exp(1i*2*pi*n0_vec_list_current[[m]][i]*(l_vec/length(t_vec))) *
( -fft_DdotQ_mki_vec - tail(DdotQ_mki_vec,1)/(1-exp(-1i*2*pi*(l_vec/length(t_vec)))) )
### ###
### Compute B[k,] ###
### BUG: hat_F_qk_vec should NOT depend on m!
hat_F_qk_vec = ecdf(shifted_edge_time_mat[clusters_list[[m]][[q]], clusters_list[[m]][[k]]])(t_vec)
# Take fft, and remove the Fourier coef corresponding to l=0
fft_hat_F_qk_vec = fft(hat_F_qk_vec)[-1]
# Reorder the Fourier coef s.t. l=-(N-1)/2, \cdots,(N-1)/2, l\neq 0.
fft_hat_F_qk_vec = c(tail(fft_hat_F_qk_vec, length(fft_hat_F_qk_vec)/2),
head(fft_hat_F_qk_vec, length(fft_hat_F_qk_vec)/2))
B[k,] = fft_hat_F_qk_vec + 1/(1-exp(-1i*2*pi*(l_vec/length(t_vec))))
### ###
### Compute C[k] ###
C[k] = fft(hat_F_qk_vec)[1]*tail(DdotQ_mki_vec,1) -
fft(DdotQ_mki_vec)[1] -
n0_vec_list_current[[m]][i]*tail(DdotQ_mki_vec,1)
### ### ###
}
gradient = 4 * ( -Re(sum(A*Conj(B))) + sum(C) )
gradient = Re(gradient) # Get rid of "+0i"
gradient_vec_list[[m]][i] = gradient
n0_vec_list_update[[m]][i] = n0_vec_list_current[[m]][i] - step_size*gradient
n0_vec_list_update[[m]][i] = round(n0_vec_list_update[[m]][i])
if(n0_vec_list_update[[m]][i] < min_n0){
n0_vec_list_update[[m]][i] = min_n0
}
else if (n0_vec_list_update[[m]][i] > max_n0){
n0_vec_list_update[[m]][i] = max_n0
}
n0_vec_list_update[[m]][i] < min_n0
min_n0
n0_vec_list_update[[m]][i]
i
n0_vec_list_update[[m]]
n0_vec_list_current
n0_vec_list_update
debugSource('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
n0_vec_list_update
debugSource('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
n0_vec_list_current
n0_vec_list_current
n0_vec_list_current
n0_vec_list_update
gradient = 4 * ( -Re(sum(A*Conj(B))) + sum(C) )
gradient = Re(gradient) # Get rid of "+0i"
gradient_vec_list[[m]][i] = gradient
n0_vec_list_update[[m]][i] = n0_vec_list_current[[m]][i] - step_size*gradient
n0_vec_list_update[[m]][i] = round(n0_vec_list_update[[m]][i])
n0_vec_list_update
n0_vec_list_update[[m]][i] < min_n0
n0_vec_list_update[[m]][i] > max_n0
max_n0
order_ind==1
n0_vec_list_current[[m]][post_ind]
post_ind
debugSource('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
debugSource('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
sqrt(sum((unlist(n0_vec_list_update)-unlist(n0_vec_list_current))^2))/
sqrt(sum((unlist(n0_vec_list_current)+.Machine$double.eps)^2))
debugSource('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
N_node_list[[m]]:1
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
res$n0_vec_list[[1]]
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
get_node_cdf_array
debugSource('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
debugSource('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
debugSource('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
Sys.time()
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
time_computeA
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
time_computeA
time_computeB
time_computeC
debugSource('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
time_computeB
end-start
time_computeB + end-start
time_computeA
time_computeB
time_computeB
time_computeB
debugSource('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
res$time
time_computeA = time_computeB = time_computeC = 0
start = Sys.time()
res = est_n0_vec_2(edge_time_mat_list = edge_time_mat_list, clusters_list = clusters_list,
t_vec = network$t_vec, step_size = 2e-4, max_iter = 100,
n0_vec_list_true = n0_vec_list_true)
end = Sys.time()
end-start
res$time
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
end-start
res$time
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
res$time
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
end-start
res$loss_history
debugSource('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
sqrt(sum((unlist(n0_vec_list_update)-unlist(n0_vec_list_current))^2))/
sqrt(sum((unlist(n0_vec_list_current)+.Machine$double.eps)^2))
sqrt(sum((unlist(n0_vec_list_update)-unlist(n0_vec_list_current))^2))/
sqrt(sum((unlist(n0_vec_list_current)+.Machine$double.eps)^2))
sqrt(sum((unlist(n0_vec_list_update)-unlist(n0_vec_list_current))^2))/
sqrt(sum((unlist(n0_vec_list_current)+.Machine$double.eps)^2))
sqrt(sum((unlist(n0_vec_list_update)-unlist(n0_vec_list_current))^2))/
sqrt(sum((unlist(n0_vec_list_current)+.Machine$double.eps)^2))
identical(n0_vec_list_update, n0_vec_list_current)
gradient
step_size*gradient
sqrt(sum((unlist(n0_vec_list_update)-unlist(n0_vec_list_current))^2))/
sqrt(sum((unlist(n0_vec_list_current)+.Machine$double.eps)^2))
sqrt(sum((unlist(n0_vec_list_update)-unlist(n0_vec_list_current))^2))/
sqrt(sum((unlist(n0_vec_list_current)+.Machine$double.eps)^2))
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
debugSource('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
sqrt(sum((unlist(n0_vec_list_update)-unlist(n0_vec_list_current))^2))/
sqrt(sum((unlist(n0_vec_list_current)+.Machine$double.eps)^2))
debugSource('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
sqrt(sum((unlist(n0_vec_list_update)-unlist(n0_vec_list_current))^2))/
sqrt(sum((unlist(n0_vec_list_current)+.Machine$double.eps)^2))
sqrt(sum((unlist(n0_vec_list_update)-unlist(n0_vec_list_current))^2))/
sqrt(sum((unlist(n0_vec_list_current)+.Machine$double.eps)^2))
sqrt(sum((unlist(n0_vec_list_update)-unlist(n0_vec_list_current))^2))/
sqrt(sum((unlist(n0_vec_list_current)+.Machine$double.eps)^2))
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
get_center_cdf_array(edge_time_mat = edge_time_mat_list[[1]], clusters = clusters_list[[1]],
n0_mat = n0_vec2mat(res$n0_vec_list[[1]]), t_vec = network$t_vec)
center_cdf_array = get_center_cdf_array(edge_time_mat = edge_time_mat_list[[1]], clusters = clusters_list[[1]],
n0_mat = n0_vec2mat(res$n0_vec_list[[1]]), t_vec = network$t_vec)
plot_pdf_array(center_cdf_array)
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
center_pdf_array = get_center_cdf_array(edge_time_mat = edge_time_mat_list[[1]], clusters = clusters_list[[1]],
n0_mat = n0_vec2mat(res$n0_vec_list[[1]]), t_vec = network$t_vec)
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
center_pdf_array = get_center_pdf_array(edge_time_mat = edge_time_mat_list[[1]], clusters = clusters_list[[1]],
n0_mat = n0_vec2mat(res$n0_vec_list[[1]]), t_vec = network$t_vec)
plot_pdf_array(center_pdf_array)
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
plot_pdf_array(center_pdf_array)
debugSource('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
cor(unlist(n0_vec_list_update), unlist(n0_vec_list_true))
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
debugSource('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
sqrt(sum((unlist(n0_vec_list_update)-unlist(n0_vec_list_current))^2))/
sqrt(sum((unlist(n0_vec_list_current)+.Machine$double.eps)^2))
sqrt(sum((unlist(n0_vec_list_update)-unlist(n0_vec_list_current))^2))/
sqrt(sum((unlist(n0_vec_list_current)+.Machine$double.eps)^2))
debugSource('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
sqrt(sum((unlist(n0_vec_list_update)-unlist(n0_vec_list_current))^2))/
sqrt(sum((unlist(n0_vec_list_current)+.Machine$double.eps)^2))
sqrt(sum((unlist(n0_vec_list_update)-unlist(n0_vec_list_current))^2))/
sqrt(sum((unlist(n0_vec_list_current)+.Machine$double.eps)^2))
sqrt(sum((unlist(n0_vec_list_update)-unlist(n0_vec_list_current))^2))/
sqrt(sum((unlist(n0_vec_list_current)+.Machine$double.eps)^2))
sqrt(sum((unlist(n0_vec_list_update)-unlist(n0_vec_list_current))^2))/
sqrt(sum((unlist(n0_vec_list_current)+.Machine$double.eps)^2))
sqrt(sum((unlist(n0_vec_list_update)-unlist(n0_vec_list_current))^2))/
sqrt(sum((unlist(n0_vec_list_current)+.Machine$double.eps)^2))
debugSource('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
n0_vec*t_unit
which(n0_vec*t_unit?10)
which(n0_vec*t_unit>10)
which(n0_vec*t_unit>15)
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
gradient_vec * 1e-4
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
n0_vec*t_unit
debugSource('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
n0_vec_list
earliest_edge_time_list
earliest_edge_time_list
hist(earliest_edge_time_list[[1]])
edge_time_mat
hist(edge_time_mat)
image(edge_time_mat)
### Plot true connecting patterns
network$true_pdf_fun_list
### Plot true connecting patterns
tmp = get_center_pdf_array(edge_time_mat = network$edge_time_mat, clusters = mem2clus(network$membership_true),
n0_vec = network$tau_vec/t_unit, t_vec = network$t_vec)
tmp
plot_pdf_array(pdf_array_list = tmp, t_vec = network$t_vec, y_lim = c(0,0.1))
network = generate_network2(total_time=200, tau_max=c(10,10,10),
conn_prob=0.99, beta=1.2, alpha=1/10,
tau_struc=max, SEED=SEED, clus_size_vec = c(clus_size,clus_size,clus_size), const=70)
network = del_iso_nodes(network)
edge_time_mat = network$edge_time_mat
### Plot true connecting patterns
tmp = get_center_pdf_array(edge_time_mat = network$edge_time_mat, clusters = mem2clus(network$membership_true),
n0_vec = network$tau_vec/t_unit, t_vec = network$t_vec)
plot_pdf_array(pdf_array_list = tmp, t_vec = network$t_vec, y_lim = c(0,0.1))
network = generate_network2(total_time=200, tau_max=c(10,10,10),
conn_prob=0.99, beta=1.2, alpha=1,
tau_struc=max, SEED=SEED, clus_size_vec = c(clus_size,clus_size,clus_size), const=70)
network = del_iso_nodes(network)
edge_time_mat = network$edge_time_mat
### Plot true connecting patterns
tmp = get_center_pdf_array(edge_time_mat = network$edge_time_mat, clusters = mem2clus(network$membership_true),
n0_vec = network$tau_vec/t_unit, t_vec = network$t_vec)
plot_pdf_array(pdf_array_list = tmp, t_vec = network$t_vec, y_lim = c(0,0.1))
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
debugSource('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
hist(earliest_edge_time_list[[1]])
earliest_edge_time_list
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
n0_vec*t_unit
debugSource('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
earliest_edge_time_list
n0_vec_list
earliest_edge_time_list
lapply(earliest_edge_time_list, function(v_vec)(v_vec-min(v_vec))/t_unit)
debugSource('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
plot_pdf_array(pdf_array_list = tmp, t_vec = network$t_vec, y_lim = c(0,0.1))
lapply(earliest_edge_time_list, function(v_vec)(v_vec-min(v_vec))/t_unit)
earliest_edge_time_list
earliest_edge_time_list
earliest_edge_time_list[[1]]=vec
earliest_edge_time_list[[1]]->vec
vec
(v_vec-min(v_vec))/t_unit
earliest_edge_time_list[[1]]->v_vec
(v_vec-min(v_vec))/t_unit
t_unit
(v_vec-min(v_vec))
debugSource('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
debugSource('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
gradient_vec * 1e-4
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
debugSource('~/Documents/Academic/SC/graphon/simulation/functions/eval_loss.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
source('~/Documents/Academic/SC/graphon/simulation/functions/eval_loss.R')
tmp=matrix(1:4,2,2)
sapply(tmp, function(x)x)
c(tmp)
source('~/Documents/Academic/SC/graphon/simulation/functions/eval_loss.R')
source('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
debugSource('~/Documents/Academic/SC/graphon/simulation/functions/eval_loss.R')
### Test
# Computing time
res = est_n0_vec_2(edge_time_mat_list = edge_time_mat_list, clusters_list = clusters_list,
t_vec = network$t_vec, step_size = 1e-4, max_iter = 50,
n0_vec_list_true = n0_vec_list_true)
for (i in 1:nrow(loss_qk)) {
loss_qk[i,] = c( numeric(n0_mat_longvec[i]), loss_qk[i, 1:(ncol(loss_qk)-n0_mat_longvec[i])])
}
loss_qk
debugSource('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
### Evaluate loss function (up to a constant) (this step is time-consuming)
loss = eval_loss(edge_time_mat_list = edge_time_mat_list, n0_vec_list = n0_vec_list_update,
clusters_list = clusters_list, t_vec = t_vec)$loss
debugSource('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
eval_loss(edge_time_mat_list = edge_time_mat_list, n0_vec_list = n0_vec_list_true,
clusters_list = clusters_list,  t_vec = t_vec)$loss
n0_vec_list = n0_vec_list_true
N_subj = length(edge_time_mat_list)
N_subj = length(edge_time_mat_list)
N_clus = length(clusters_list[[1]])
t_unit = t_vec[2]-t_vec[1]
### Evaluate loss (up to a constant)
loss = 0
for (q in 1:N_clus) {
for (k in 1:N_clus) {
adjus_node_cdf_bigmat = c()
n0_mat_longvec = c()
for (m in 1:N_subj) {
### V1
adjus_edge_time_mat = edge_time_mat_list[[m]]-n0_vec2mat(n0_vec_list[[m]])*t_unit
### v2
# adjus_edge_time_mat = edge_time_mat_list[[m]]-n0_vec2mat(n0_vec_list[[m]])*t_unit*0
### ### ###
clusters = clusters_list[[m]]
adjus_node_cdf_mat = t(sapply(adjus_edge_time_mat[clusters[[q]], clusters[[k]]],
function(t) if(!is.na(t)) ecdf(t)(t_vec)
else rep(NA,length(t_vec))) )
non_NA_id = which(!is.na(rowSums(adjus_node_cdf_mat)))
adjus_node_cdf_mat = adjus_node_cdf_mat[non_NA_id, ]
adjus_node_cdf_bigmat = rbind(adjus_node_cdf_bigmat, adjus_node_cdf_mat)
### n0_mat_longvec: length \approx M*n^2
n0_mat_vec = c(n0_vec2mat(n0_vec_list[[m]]))
n0_mat_longvec = c(n0_mat_longvec, n0_mat_vec)
}
### Sweep out col_means
loss_qk = sweep(adjus_node_cdf_bigmat, 2,
apply(adjus_node_cdf_bigmat, 2, mean))
### Shift back towards right
for (i in 1:nrow(loss_qk)) {
loss_qk[i,] = c( numeric(n0_mat_longvec[i]), loss_qk[i, 1:(ncol(loss_qk)-n0_mat_longvec[i])])
}
loss_qk = sum(loss_qk^2)
loss = loss + loss_qk
}
}
loss_qk[i,] = c( numeric(n0_mat_longvec[i]), loss_qk[i, 1:(ncol(loss_qk)-n0_mat_longvec[i])])
n0_mat_longvec[i]
numeric(n0_mat_longvec[i])
ncol(loss_qk)
ncol(loss_qk)-n0_mat_longvec[i]
1:(ncol(loss_qk)-n0_mat_longvec[i])
round(n0_mat_longvec)
n0_mat_longvec = round(n0_mat_longvec)
loss_qk[i,] = c( numeric(n0_mat_longvec[i]), loss_qk[i, 1:(ncol(loss_qk)-n0_mat_longvec[i])])
debugSource('~/Documents/Academic/SC/graphon/simulation/functions/eval_loss.R')
eval_loss(edge_time_mat_list = edge_time_mat_list, n0_vec_list = n0_vec_list_true,
clusters_list = clusters_list,  t_vec = t_vec)$loss
source('~/Documents/Academic/SC/graphon/simulation/functions/eval_loss.R')
debugSource('~/Documents/Academic/SC/graphon/simulation/algorithm_test.R')
